{"version":3,"sources":["pivot.coffee"],"names":[],"mappings":"AAAA;AAAA,MAAA,cAAA;IAAA;;;+BAAA;;AAAA,EAAA,cAAA,GAAiB,SAAC,WAAD,GAAA;AACb,IAAA,IAAG,MAAA,CAAA,OAAA,KAAkB,QAAlB,IAA+B,MAAA,CAAA,MAAA,KAAiB,QAAnD;aACI,WAAA,CAAY,OAAA,CAAQ,QAAR,CAAZ,EADJ;KAAA,MAEK,IAAG,MAAA,CAAA,MAAA,KAAiB,UAAjB,IAAgC,MAAM,CAAC,GAA1C;aACD,MAAA,CAAO,CAAC,QAAD,CAAP,EAAmB,WAAnB,EADC;KAAA,MAAA;aAID,WAAA,CAAY,MAAZ,EAJC;KAHQ;EAAA,CAAjB,CAAA;;AAAA,EASA,cAAA,CAAe,SAAC,CAAD,GAAA;AAEX;AAAA;;OAAA;AAAA,QAAA,oNAAA;AAAA,IAIA,aAAA,GAAgB,SAAC,IAAD,EAAO,YAAP,EAAqB,UAArB,GAAA;AACZ,UAAA,cAAA;AAAA,MAAA,IAAA,IAAQ,EAAR,CAAA;AAAA,MACA,CAAA,GAAI,IAAI,CAAC,KAAL,CAAW,GAAX,CADJ,CAAA;AAAA,MAEA,EAAA,GAAK,CAAE,CAAA,CAAA,CAFP,CAAA;AAAA,MAGA,EAAA,GAAQ,CAAC,CAAC,MAAF,GAAW,CAAd,GAAsB,UAAA,GAAa,CAAE,CAAA,CAAA,CAArC,GAA6C,EAHlD,CAAA;AAAA,MAIA,GAAA,GAAM,cAJN,CAAA;AAKiD,aAAM,GAAG,CAAC,IAAJ,CAAS,EAAT,CAAN,GAAA;AAAjD,QAAA,EAAA,GAAK,EAAE,CAAC,OAAH,CAAW,GAAX,EAAgB,IAAA,GAAO,YAAP,GAAsB,IAAtC,CAAL,CAAiD;MAAA,CALjD;AAMA,aAAO,EAAA,GAAK,EAAZ,CAPY;IAAA,CAJhB,CAAA;AAAA,IAaA,YAAA,GAAe,SAAC,IAAD,GAAA;AACX,UAAA,QAAA;AAAA,MAAA,QAAA,GACI;AAAA,QAAA,kBAAA,EAAoB,CAApB;AAAA,QAAuB,MAAA,EAAQ,CAA/B;AAAA,QACA,YAAA,EAAc,GADd;AAAA,QACmB,UAAA,EAAY,GAD/B;AAAA,QAEA,MAAA,EAAQ,EAFR;AAAA,QAEY,MAAA,EAAQ,EAFpB;AAAA,QAGA,QAAA,EAAU,KAHV;OADJ,CAAA;AAAA,MAKA,IAAA,GAAO,CAAC,CAAC,MAAF,CAAS,EAAT,EAAa,QAAb,EAAuB,IAAvB,CALP,CAAA;aAMA,SAAC,CAAD,GAAA;AACI,YAAA,MAAA;AAAA,QAAA,IAAa,KAAA,CAAM,CAAN,CAAA,IAAY,CAAA,QAAI,CAAS,CAAT,CAA7B;AAAA,iBAAO,EAAP,CAAA;SAAA;AACA,QAAA,IAAa,CAAA,KAAK,CAAL,IAAW,CAAA,IAAQ,CAAC,QAAjC;AAAA,iBAAO,EAAP,CAAA;SADA;AAAA,QAEA,MAAA,GAAS,aAAA,CAAc,CAAC,IAAI,CAAC,MAAL,GAAY,CAAb,CAAe,CAAC,OAAhB,CAAwB,IAAI,CAAC,kBAA7B,CAAd,EAAgE,IAAI,CAAC,YAArE,EAAmF,IAAI,CAAC,UAAxF,CAFT,CAAA;AAGA,eAAO,EAAA,GAAG,IAAI,CAAC,MAAR,GAAe,MAAf,GAAsB,IAAI,CAAC,MAAlC,CAJJ;MAAA,EAPW;IAAA,CAbf,CAAA;AAAA,IA2BA,KAAA,GAAQ,YAAA,CAAA,CA3BR,CAAA;AAAA,IA4BA,QAAA,GAAW,YAAA,CAAa;AAAA,MAAA,kBAAA,EAAoB,CAApB;KAAb,CA5BX,CAAA;AAAA,IA6BA,QAAA,GAAW,YAAA,CAAa;AAAA,MAAA,kBAAA,EAAmB,CAAnB;AAAA,MAAsB,MAAA,EAAQ,GAA9B;AAAA,MAAmC,MAAA,EAAQ,GAA3C;KAAb,CA7BX,CAAA;AAAA,IA+BA,mBAAA,GACI;AAAA,MAAA,KAAA,EAAO,SAAC,SAAD,GAAA;;UAAC,YAAU;SAAa;eAAA,SAAA,GAAA;iBAAM,SAAC,IAAD,EAAO,MAAP,EAAe,MAAf,GAAA;mBACjC;AAAA,cAAA,KAAA,EAAO,CAAP;AAAA,cACA,IAAA,EAAO,SAAA,GAAA;uBAAG,IAAC,CAAA,KAAD,GAAH;cAAA,CADP;AAAA,cAEA,KAAA,EAAO,SAAA,GAAA;uBAAG,IAAC,CAAA,MAAJ;cAAA,CAFP;AAAA,cAGA,MAAA,EAAQ,SAHR;cADiC;UAAA,EAAN;QAAA,EAAxB;MAAA,CAAP;AAAA,MAMA,WAAA,EAAa,SAAC,SAAD,GAAA;;UAAC,YAAU;SAAa;eAAA,SAAC,GAAD,GAAA;AAAY,cAAA,IAAA;AAAA,UAAV,OAAD,MAAW,CAAA;iBAAA,SAAC,IAAD,EAAO,MAAP,EAAe,MAAf,GAAA;mBAC7C;AAAA,cAAA,IAAA,EAAM,EAAN;AAAA,cACA,IAAA,EAAM,SAAC,MAAD,GAAA;AAAY,oBAAA,GAAA;AAAA,gBAAA,UAA4B,MAAO,CAAA,IAAA,CAAP,EAAA,aAAoB,IAAC,CAAA,IAArB,EAAA,GAAA,KAA5B;yBAAA,IAAC,CAAA,IAAI,CAAC,IAAN,CAAW,MAAO,CAAA,IAAA,CAAlB,EAAA;iBAAZ;cAAA,CADN;AAAA,cAEA,KAAA,EAAO,SAAA,GAAA;uBAAG,IAAC,CAAA,IAAI,CAAC,OAAT;cAAA,CAFP;AAAA,cAGA,MAAA,EAAQ,SAHR;AAAA,cAIA,SAAA,EAAc,YAAH,GAAc,CAAd,GAAqB,CAJhC;cAD6C;UAAA,EAAZ;QAAA,EAAxB;MAAA,CANb;AAAA,MAaA,UAAA,EAAY,SAAC,GAAD,GAAA;eAAS,SAAC,GAAD,GAAA;AAAY,cAAA,IAAA;AAAA,UAAV,OAAD,MAAW,CAAA;iBAAA,SAAC,IAAD,EAAO,MAAP,EAAe,MAAf,GAAA;mBAC7B;AAAA,cAAA,IAAA,EAAM,EAAN;AAAA,cACA,IAAA,EAAM,SAAC,MAAD,GAAA;AAAY,oBAAA,GAAA;AAAA,gBAAA,UAA4B,MAAO,CAAA,IAAA,CAAP,EAAA,aAAoB,IAAC,CAAA,IAArB,EAAA,GAAA,KAA5B;yBAAA,IAAC,CAAA,IAAI,CAAC,IAAN,CAAW,MAAO,CAAA,IAAA,CAAlB,EAAA;iBAAZ;cAAA,CADN;AAAA,cAEA,KAAA,EAAO,SAAA,GAAA;uBAAG,IAAC,CAAA,IAAI,CAAC,IAAN,CAAW,GAAX,EAAH;cAAA,CAFP;AAAA,cAGA,MAAA,EAAQ,SAAC,CAAD,GAAA;uBAAO,EAAP;cAAA,CAHR;AAAA,cAIA,SAAA,EAAc,YAAH,GAAc,CAAd,GAAqB,CAJhC;cAD6B;UAAA,EAAZ;QAAA,EAAT;MAAA,CAbZ;AAAA,MAoBA,GAAA,EAAK,SAAC,SAAD,GAAA;;UAAC,YAAU;SAAU;eAAA,SAAC,GAAD,GAAA;AAAY,cAAA,IAAA;AAAA,UAAV,OAAD,MAAW,CAAA;iBAAA,SAAC,IAAD,EAAO,MAAP,EAAe,MAAf,GAAA;mBAClC;AAAA,cAAA,GAAA,EAAK,CAAL;AAAA,cACA,IAAA,EAAM,SAAC,MAAD,GAAA;AAAY,gBAAA,IAAoC,CAAA,KAAI,CAAM,UAAA,CAAW,MAAO,CAAA,IAAA,CAAlB,CAAN,CAAxC;yBAAA,IAAC,CAAA,GAAD,IAAQ,UAAA,CAAW,MAAO,CAAA,IAAA,CAAlB,EAAR;iBAAZ;cAAA,CADN;AAAA,cAEA,KAAA,EAAO,SAAA,GAAA;uBAAG,IAAC,CAAA,IAAJ;cAAA,CAFP;AAAA,cAGA,MAAA,EAAQ,SAHR;AAAA,cAIA,SAAA,EAAc,YAAH,GAAc,CAAd,GAAqB,CAJhC;cADkC;UAAA,EAAZ;QAAA,EAArB;MAAA,CApBL;AAAA,MA2BA,GAAA,EAAK,SAAC,SAAD,GAAA;;UAAC,YAAU;SAAU;eAAA,SAAC,GAAD,GAAA;AAAY,cAAA,IAAA;AAAA,UAAV,OAAD,MAAW,CAAA;iBAAA,SAAC,IAAD,EAAO,MAAP,EAAe,MAAf,GAAA;mBAClC;AAAA,cAAA,GAAA,EAAK,IAAL;AAAA,cACA,MAAA,EAAQ,OAAA,gBAAQ,IAAI,CAAE,gBAAd,EAAuB,IAAvB,CADR;AAAA,cAEA,IAAA,EAAM,SAAC,MAAD,GAAA;AACF,oBAAA,MAAA;AAAA,gBAAA,CAAA,GAAI,MAAO,CAAA,IAAA,CAAX,CAAA;AACA,gBAAA,IAAY,IAAC,CAAA,MAAD,CAAQ,CAAR,mCAAkB,CAAlB,CAAA,IAAwB,CAApC;yBAAA,IAAC,CAAA,GAAD,GAAO,EAAP;iBAFE;cAAA,CAFN;AAAA,cAKA,KAAA,EAAO,SAAA,GAAA;uBAAG,IAAC,CAAA,IAAJ;cAAA,CALP;AAAA,cAMA,MAAA,EAAQ,SAAC,CAAD,GAAA;AAAO,gBAAA,IAAG,KAAA,CAAM,CAAN,CAAH;yBAAiB,EAAjB;iBAAA,MAAA;yBAAwB,SAAA,CAAU,CAAV,EAAxB;iBAAP;cAAA,CANR;AAAA,cAOA,SAAA,EAAc,YAAH,GAAc,CAAd,GAAqB,CAPhC;cADkC;UAAA,EAAZ;QAAA,EAArB;MAAA,CA3BL;AAAA,MAqCA,GAAA,EAAK,SAAC,SAAD,GAAA;;UAAC,YAAU;SAAU;eAAA,SAAC,GAAD,GAAA;AAAY,cAAA,IAAA;AAAA,UAAV,OAAD,MAAW,CAAA;iBAAA,SAAC,IAAD,EAAO,MAAP,EAAe,MAAf,GAAA;mBAClC;AAAA,cAAA,GAAA,EAAK,IAAL;AAAA,cACA,MAAA,EAAQ,OAAA,gBAAQ,IAAI,CAAE,gBAAd,EAAuB,IAAvB,CADR;AAAA,cAEA,IAAA,EAAM,SAAC,MAAD,GAAA;AACF,oBAAA,MAAA;AAAA,gBAAA,CAAA,GAAI,MAAO,CAAA,IAAA,CAAX,CAAA;AACA,gBAAA,IAAY,IAAC,CAAA,MAAD,CAAQ,CAAR,mCAAkB,CAAlB,CAAA,IAAwB,CAApC;yBAAA,IAAC,CAAA,GAAD,GAAO,EAAP;iBAFE;cAAA,CAFN;AAAA,cAKA,KAAA,EAAO,SAAA,GAAA;uBAAG,IAAC,CAAA,IAAJ;cAAA,CALP;AAAA,cAMA,MAAA,EAAQ,SAAC,CAAD,GAAA;AAAO,gBAAA,IAAG,KAAA,CAAM,CAAN,CAAH;yBAAiB,EAAjB;iBAAA,MAAA;yBAAwB,SAAA,CAAU,CAAV,EAAxB;iBAAP;cAAA,CANR;AAAA,cAOA,SAAA,EAAc,YAAH,GAAc,CAAd,GAAqB,CAPhC;cADkC;UAAA,EAAZ;QAAA,EAArB;MAAA,CArCL;AAAA,MA+CA,OAAA,EAAU,SAAC,SAAD,GAAA;;UAAC,YAAU;SAAU;eAAA,SAAC,GAAD,GAAA;AAAY,cAAA,IAAA;AAAA,UAAV,OAAD,MAAW,CAAA;iBAAA,SAAC,IAAD,EAAO,MAAP,EAAe,MAAf,GAAA;mBACvC;AAAA,cAAA,GAAA,EAAK,CAAL;AAAA,cACA,GAAA,EAAK,CADL;AAAA,cAEA,IAAA,EAAM,SAAC,MAAD,GAAA;AACF,gBAAA,IAAG,CAAA,KAAI,CAAM,UAAA,CAAW,MAAO,CAAA,IAAA,CAAlB,CAAN,CAAP;AACI,kBAAA,IAAC,CAAA,GAAD,IAAQ,UAAA,CAAW,MAAO,CAAA,IAAA,CAAlB,CAAR,CAAA;yBACA,IAAC,CAAA,GAAD,GAFJ;iBADE;cAAA,CAFN;AAAA,cAMA,KAAA,EAAO,SAAA,GAAA;uBAAG,IAAC,CAAA,GAAD,GAAK,IAAC,CAAA,IAAT;cAAA,CANP;AAAA,cAOA,MAAA,EAAQ,SAPR;AAAA,cAQA,SAAA,EAAc,YAAH,GAAc,CAAd,GAAqB,CARhC;cADuC;UAAA,EAAZ;QAAA,EAArB;MAAA,CA/CV;AAAA,MA0DA,UAAA,EAAY,SAAC,SAAD,GAAA;;UAAC,YAAU;SAAU;eAAA,SAAC,GAAD,GAAA;AAAkB,cAAA,UAAA;AAAA,UAAhB,cAAK,cAAW,CAAA;iBAAA,SAAC,IAAD,EAAO,MAAP,EAAe,MAAf,GAAA;mBAC/C;AAAA,cAAA,MAAA,EAAQ,CAAR;AAAA,cACA,QAAA,EAAU,CADV;AAAA,cAEA,IAAA,EAAM,SAAC,MAAD,GAAA;AACF,gBAAA,IAA0C,CAAA,KAAI,CAAM,UAAA,CAAW,MAAO,CAAA,GAAA,CAAlB,CAAN,CAA9C;AAAA,kBAAA,IAAC,CAAA,MAAD,IAAa,UAAA,CAAW,MAAO,CAAA,GAAA,CAAlB,CAAb,CAAA;iBAAA;AACA,gBAAA,IAA0C,CAAA,KAAI,CAAM,UAAA,CAAW,MAAO,CAAA,KAAA,CAAlB,CAAN,CAA9C;yBAAA,IAAC,CAAA,QAAD,IAAa,UAAA,CAAW,MAAO,CAAA,KAAA,CAAlB,EAAb;iBAFE;cAAA,CAFN;AAAA,cAKA,KAAA,EAAO,SAAA,GAAA;uBAAG,IAAC,CAAA,MAAD,GAAQ,IAAC,CAAA,SAAZ;cAAA,CALP;AAAA,cAMA,MAAA,EAAQ,SANR;AAAA,cAOA,SAAA,EAAc,aAAA,IAAS,eAAZ,GAAwB,CAAxB,GAA+B,CAP1C;cAD+C;UAAA,EAAlB;QAAA,EAArB;MAAA,CA1DZ;AAAA,MAoEA,iBAAA,EAAmB,SAAC,KAAD,EAAa,SAAb,GAAA;;UAAC,QAAM;SAA0B;;UAApB,YAAU;SAAU;eAAA,SAAC,GAAD,GAAA;AAAkB,cAAA,UAAA;AAAA,UAAhB,cAAK,cAAW,CAAA;iBAAA,SAAC,IAAD,EAAO,MAAP,EAAe,MAAf,GAAA;mBAClE;AAAA,cAAA,MAAA,EAAQ,CAAR;AAAA,cACA,QAAA,EAAU,CADV;AAAA,cAEA,IAAA,EAAM,SAAC,MAAD,GAAA;AACF,gBAAA,IAA0C,CAAA,KAAI,CAAM,UAAA,CAAW,MAAO,CAAA,GAAA,CAAlB,CAAN,CAA9C;AAAA,kBAAA,IAAC,CAAA,MAAD,IAAa,UAAA,CAAW,MAAO,CAAA,GAAA,CAAlB,CAAb,CAAA;iBAAA;AACA,gBAAA,IAA0C,CAAA,KAAI,CAAM,UAAA,CAAW,MAAO,CAAA,KAAA,CAAlB,CAAN,CAA9C;yBAAA,IAAC,CAAA,QAAD,IAAa,UAAA,CAAW,MAAO,CAAA,KAAA,CAAlB,EAAb;iBAFE;cAAA,CAFN;AAAA,cAKA,KAAA,EAAO,SAAA,GAAA;AACH,oBAAA,IAAA;AAAA,gBAAA,IAAA,GAAU,KAAH,GAAc,CAAd,GAAqB,CAAA,CAA5B,CAAA;uBACA,CAAC,iBAAA,GAAkB,IAAC,CAAA,QAAnB,GAA8B,IAAC,CAAA,MAAD,GAAQ,IAAC,CAAA,QAAvC,GAAkD,kBAAA,GAAmB,IAAnB,GAC/C,IAAI,CAAC,IAAL,CAAU,iBAAA,GAAmB,CAAC,IAAC,CAAA,QAAD,GAAU,IAAC,CAAA,QAAZ,CAAnB,GAA2C,CAAC,IAAC,CAAA,MAAD,GAAQ,CAAC,CAAA,GAAI,IAAC,CAAA,MAAD,GAAS,IAAC,CAAA,QAAf,CAAT,CAAA,GAAoC,CAAC,IAAC,CAAA,QAAD,GAAU,IAAC,CAAA,QAAZ,CAAzF,CADJ,CAAA,GAEI,CAAC,CAAA,GAAI,iBAAA,GAAkB,IAAC,CAAA,QAAxB,EAJD;cAAA,CALP;AAAA,cAUA,MAAA,EAAQ,SAVR;AAAA,cAWA,SAAA,EAAc,aAAA,IAAS,eAAZ,GAAwB,CAAxB,GAA+B,CAX1C;cADkE;UAAA,EAAlB;QAAA,EAAjC;MAAA,CApEnB;AAAA,MAkFA,UAAA,EAAY,SAAC,OAAD,EAAU,IAAV,EAAwB,SAAxB,GAAA;;UAAU,OAAK;SAAgC;;UAAvB,YAAU;SAAa;eAAA,SAAA,GAAA;AAAU,cAAA,CAAA;AAAA,UAAT,yDAAS,CAAA;iBAAA,SAAC,IAAD,EAAO,MAAP,EAAe,MAAf,GAAA;mBACjE;AAAA,cAAA,QAAA,EAAU;AAAA,gBAAC,KAAA,EAAM,CAAC,EAAD,EAAI,EAAJ,CAAP;AAAA,gBAAe,GAAA,EAAI,CAAC,MAAD,EAAQ,EAAR,CAAnB;AAAA,gBAA+B,GAAA,EAAI,CAAC,EAAD,EAAI,MAAJ,CAAnC;eAAgD,CAAA,IAAA,CAA1D;AAAA,cACA,KAAA,EAAO,OAAA,aAAQ,CAAR,CAAA,CAAc,IAAd,EAAoB,MAApB,EAA4B,MAA5B,CADP;AAAA,cAEA,IAAA,EAAM,SAAC,MAAD,GAAA;uBAAY,IAAC,CAAA,KAAK,CAAC,IAAP,CAAY,MAAZ,EAAZ;cAAA,CAFN;AAAA,cAGA,MAAA,EAAQ,SAHR;AAAA,cAIA,KAAA,EAAO,SAAA,GAAA;uBAAG,IAAC,CAAA,KAAK,CAAC,KAAP,CAAA,CAAA,GAAiB,IAAI,CAAC,aAAL,aAAmB,IAAC,CAAA,QAApB,CAAgC,CAAC,KAAK,CAAC,KAAvC,CAAA,EAApB;cAAA,CAJP;AAAA,cAKA,SAAA,EAAW,OAAA,aAAQ,CAAR,CAAA,CAAA,CAAe,CAAC,SAL3B;cADiE;UAAA,EAAV;QAAA,EAA/C;MAAA,CAlFZ;KAhCJ,CAAA;AAAA,IA2HA,WAAA,GAAiB,CAAA,SAAC,GAAD,GAAA;aACb;AAAA,QAAA,OAAA,EAAwB,GAAG,CAAC,KAAJ,CAAU,QAAV,CAAxB;AAAA,QACA,qBAAA,EAAwB,GAAG,CAAC,WAAJ,CAAgB,QAAhB,CADxB;AAAA,QAEA,oBAAA,EAAwB,GAAG,CAAC,UAAJ,CAAe,IAAf,CAFxB;AAAA,QAGA,KAAA,EAAwB,GAAG,CAAC,GAAJ,CAAQ,KAAR,CAHxB;AAAA,QAIA,aAAA,EAAwB,GAAG,CAAC,GAAJ,CAAQ,QAAR,CAJxB;AAAA,QAKA,SAAA,EAAwB,GAAG,CAAC,OAAJ,CAAY,KAAZ,CALxB;AAAA,QAMA,SAAA,EAAwB,GAAG,CAAC,GAAJ,CAAQ,KAAR,CANxB;AAAA,QAOA,SAAA,EAAwB,GAAG,CAAC,GAAJ,CAAQ,KAAR,CAPxB;AAAA,QAQA,cAAA,EAAwB,GAAG,CAAC,UAAJ,CAAe,KAAf,CARxB;AAAA,QASA,iBAAA,EAAwB,GAAG,CAAC,iBAAJ,CAAsB,IAAtB,EAA4B,KAA5B,CATxB;AAAA,QAUA,iBAAA,EAAwB,GAAG,CAAC,iBAAJ,CAAsB,KAAtB,EAA6B,KAA7B,CAVxB;AAAA,QAWA,0BAAA,EAAgC,GAAG,CAAC,UAAJ,CAAe,GAAG,CAAC,GAAJ,CAAA,CAAf,EAA4B,OAA5B,EAAqC,QAArC,CAXhC;AAAA,QAYA,yBAAA,EAAgC,GAAG,CAAC,UAAJ,CAAe,GAAG,CAAC,GAAJ,CAAA,CAAf,EAA4B,KAA5B,EAAqC,QAArC,CAZhC;AAAA,QAaA,4BAAA,EAAgC,GAAG,CAAC,UAAJ,CAAe,GAAG,CAAC,GAAJ,CAAA,CAAf,EAA4B,KAA5B,EAAqC,QAArC,CAbhC;AAAA,QAcA,4BAAA,EAAgC,GAAG,CAAC,UAAJ,CAAe,GAAG,CAAC,KAAJ,CAAA,CAAf,EAA4B,OAA5B,EAAqC,QAArC,CAdhC;AAAA,QAeA,2BAAA,EAAgC,GAAG,CAAC,UAAJ,CAAe,GAAG,CAAC,KAAJ,CAAA,CAAf,EAA4B,KAA5B,EAAqC,QAArC,CAfhC;AAAA,QAgBA,8BAAA,EAAgC,GAAG,CAAC,UAAJ,CAAe,GAAG,CAAC,KAAJ,CAAA,CAAf,EAA4B,KAA5B,EAAqC,QAArC,CAhBhC;QADa;IAAA,CAAA,CAAH,CAAU,mBAAV,CA3Hd,CAAA;AAAA,IA8IA,SAAA,GACI;AAAA,MAAA,OAAA,EAAkB,SAAC,IAAD,EAAO,IAAP,GAAA;eAAkB,kBAAA,CAAmB,IAAnB,EAAyB,IAAzB,EAAlB;MAAA,CAAlB;AAAA,MACA,gBAAA,EAAkB,SAAC,IAAD,EAAO,IAAP,GAAA;eAAgB,CAAA,CAAE,kBAAA,CAAmB,IAAnB,EAAyB,IAAzB,CAAF,CAAiC,CAAC,QAAlC,CAAA,EAAhB;MAAA,CADlB;AAAA,MAEA,SAAA,EAAkB,SAAC,IAAD,EAAO,IAAP,GAAA;eAAgB,CAAA,CAAE,kBAAA,CAAmB,IAAnB,EAAyB,IAAzB,CAAF,CAAiC,CAAC,OAAlC,CAA0C,SAA1C,EAAwD,IAAxD,EAAhB;MAAA,CAFlB;AAAA,MAGA,aAAA,EAAkB,SAAC,IAAD,EAAO,IAAP,GAAA;eAAgB,CAAA,CAAE,kBAAA,CAAmB,IAAnB,EAAyB,IAAzB,CAAF,CAAiC,CAAC,OAAlC,CAA0C,YAA1C,EAAwD,IAAxD,EAAhB;MAAA,CAHlB;AAAA,MAIA,aAAA,EAAkB,SAAC,IAAD,EAAO,IAAP,GAAA;eAAgB,CAAA,CAAE,kBAAA,CAAmB,IAAnB,EAAyB,IAAzB,CAAF,CAAiC,CAAC,OAAlC,CAA0C,YAA1C,EAAwD,IAAxD,EAAhB;MAAA,CAJlB;KA/IJ,CAAA;AAAA,IAqJA,OAAA,GACI;AAAA,MAAA,EAAA,EACI;AAAA,QAAA,WAAA,EAAa,WAAb;AAAA,QACA,SAAA,EAAW,SADX;AAAA,QAEA,aAAA,EACI;AAAA,UAAA,WAAA,EAAa,qDAAb;AAAA,UACA,YAAA,EAAc,qDADd;AAAA,UAEA,aAAA,EAAe,gDAFf;AAAA,UAGA,SAAA,EAAW,YAHX;AAAA,UAIA,UAAA,EAAY,aAJZ;AAAA,UAKA,OAAA,EAAS,oBALT;AAAA,UAMA,aAAA,EAAe,eANf;AAAA,UAOA,KAAA,EAAO,OAPP;AAAA,UAQA,MAAA,EAAQ,QARR;AAAA,UASA,MAAA,EAAQ,QATR;AAAA,UAUA,EAAA,EAAI,IAVJ;AAAA,UAWA,EAAA,EAAI,IAXJ;SAHJ;OADJ;KAtJJ,CAAA;AAAA,IAwKA,UAAA,GAAa,CAAC,KAAD,EAAO,KAAP,EAAa,KAAb,EAAmB,KAAnB,EAAyB,KAAzB,EAA+B,KAA/B,EAAqC,KAArC,EAA2C,KAA3C,EAAiD,KAAjD,EAAuD,KAAvD,EAA6D,KAA7D,EAAmE,KAAnE,CAxKb,CAAA;AAAA,IAyKA,UAAA,GAAa,CAAC,KAAD,EAAO,KAAP,EAAa,KAAb,EAAmB,KAAnB,EAAyB,KAAzB,EAA+B,KAA/B,EAAqC,KAArC,CAzKb,CAAA;AAAA,IA0KA,OAAA,GAAU,SAAC,MAAD,GAAA;aAAY,CAAC,GAAA,GAAI,MAAL,CAAY,CAAC,MAAb,CAAoB,CAAA,CAApB,EAAuB,CAAvB,EAAZ;IAAA,CA1KV,CAAA;AAAA,IA4KA,QAAA,GACI;AAAA,MAAA,GAAA,EAAK,SAAC,GAAD,EAAM,QAAN,GAAA;eAAmB,SAAC,MAAD,GAAA;iBAAY,MAAO,CAAA,GAAA,CAAP,GAAc,MAAO,CAAA,GAAA,CAAP,GAAc,SAAxC;QAAA,EAAnB;MAAA,CAAL;AAAA,MACA,UAAA,EAAY,SAAC,GAAD,EAAM,YAAN,EAAoB,SAApB,EAAqC,QAArC,EAA0D,QAA1D,GAAA;AACR,YAAA,GAAA;;UAD4B,YAAU;SACtC;;UAD6C,WAAS;SACtD;;UADkE,WAAS;SAC3E;AAAA,QAAA,GAAA,GAAS,SAAH,GAAkB,KAAlB,GAA6B,EAAnC,CAAA;eACA,SAAC,MAAD,GAAA;AACI,cAAA,IAAA;AAAA,UAAA,IAAA,GAAW,IAAA,IAAA,CAAK,IAAI,CAAC,KAAL,CAAW,MAAO,CAAA,GAAA,CAAlB,CAAL,CAAX,CAAA;AACA,UAAA,IAAG,KAAA,CAAM,IAAN,CAAH;AAAoB,mBAAO,EAAP,CAApB;WADA;iBAEA,YAAY,CAAC,OAAb,CAAqB,OAArB,EAA8B,SAAC,CAAD,EAAI,CAAJ,GAAA;AAC1B,oBAAO,CAAP;AAAA,mBACS,GADT;uBACkB,IAAK,CAAA,KAAA,GAAM,GAAN,GAAU,UAAV,CAAL,CAAA,EADlB;AAAA,mBAES,GAFT;uBAEkB,OAAA,CAAQ,IAAK,CAAA,KAAA,GAAM,GAAN,GAAU,OAAV,CAAL,CAAA,CAAA,GAAyB,CAAjC,EAFlB;AAAA,mBAGS,GAHT;uBAGkB,QAAS,CAAA,IAAK,CAAA,KAAA,GAAM,GAAN,GAAU,OAAV,CAAL,CAAA,CAAA,EAH3B;AAAA,mBAIS,GAJT;uBAIkB,OAAA,CAAQ,IAAK,CAAA,KAAA,GAAM,GAAN,GAAU,MAAV,CAAL,CAAA,CAAR,EAJlB;AAAA,mBAKS,GALT;uBAKkB,QAAS,CAAA,IAAK,CAAA,KAAA,GAAM,GAAN,GAAU,KAAV,CAAL,CAAA,CAAA,EAL3B;AAAA,mBAMS,GANT;uBAMkB,IAAK,CAAA,KAAA,GAAM,GAAN,GAAU,KAAV,CAAL,CAAA,EANlB;AAAA,mBAOS,GAPT;uBAOkB,OAAA,CAAQ,IAAK,CAAA,KAAA,GAAM,GAAN,GAAU,OAAV,CAAL,CAAA,CAAR,EAPlB;AAAA,mBAQS,GART;uBAQkB,OAAA,CAAQ,IAAK,CAAA,KAAA,GAAM,GAAN,GAAU,SAAV,CAAL,CAAA,CAAR,EARlB;AAAA,mBASS,GATT;uBASkB,OAAA,CAAQ,IAAK,CAAA,KAAA,GAAM,GAAN,GAAU,SAAV,CAAL,CAAA,CAAR,EATlB;AAAA;uBAUS,GAAA,GAAM,EAVf;AAAA,aAD0B;UAAA,CAA9B,EAHJ;QAAA,EAFQ;MAAA,CADZ;KA7KJ,CAAA;AAAA,IAgMA,WAAA,GAAc,CAAA,SAAA,KAAA,GAAA;aAAA,SAAC,EAAD,EAAK,EAAL,GAAA;AACV,YAAA,wBAAA;AAAA,QAAA,EAAA,GAAK,cAAL,CAAA;AAAA,QACA,EAAA,GAAK,IADL,CAAA;AAAA,QAEA,EAAA,GAAK,IAFL,CAAA;AAGA,QAAA,IAAG,MAAA,CAAA,EAAA,KAAa,QAAb,IAAyB,MAAA,CAAA,EAAA,KAAa,QAAzC;AACI,UAAA,IAAa,KAAA,CAAM,EAAN,CAAb;AAAA,mBAAO,CAAP,CAAA;WAAA;AACA,UAAA,IAAc,KAAA,CAAM,EAAN,CAAd;AAAA,mBAAO,CAAA,CAAP,CAAA;WADA;AAEA,iBAAO,EAAA,GAAK,EAAZ,CAHJ;SAHA;AAAA,QAOA,CAAA,GAAI,MAAA,CAAO,EAAP,CAPJ,CAAA;AAAA,QAQA,CAAA,GAAI,MAAA,CAAO,EAAP,CARJ,CAAA;AASA,QAAA,IAAa,CAAA,KAAK,CAAlB;AAAA,iBAAO,CAAP,CAAA;SATA;AAUA,QAAA,IAAA,CAAA,CAAyC,EAAE,CAAC,IAAH,CAAQ,CAAR,CAAA,IAAe,EAAE,CAAC,IAAH,CAAQ,CAAR,CAAxD,CAAA;AAAA,iBAAO,CAAI,CAAA,GAAI,CAAP,GAAc,CAAd,GAAqB,CAAA,CAAtB,CAAP,CAAA;SAVA;AAAA,QAWA,CAAA,GAAI,CAAC,CAAC,KAAF,CAAQ,EAAR,CAXJ,CAAA;AAAA,QAYA,CAAA,GAAI,CAAC,CAAC,KAAF,CAAQ,EAAR,CAZJ,CAAA;AAaA,eAAM,CAAC,CAAC,MAAF,IAAa,CAAC,CAAC,MAArB,GAAA;AACI,UAAA,EAAA,GAAK,CAAC,CAAC,KAAF,CAAA,CAAL,CAAA;AAAA,UACA,EAAA,GAAK,CAAC,CAAC,KAAF,CAAA,CADL,CAAA;AAEA,UAAA,IAAG,EAAA,KAAM,EAAT;AACI,YAAA,IAAG,EAAE,CAAC,IAAH,CAAQ,EAAR,CAAA,IAAgB,EAAE,CAAC,IAAH,CAAQ,EAAR,CAAnB;AACI,qBAAO,EAAE,CAAC,OAAH,CAAW,EAAX,EAAe,IAAf,CAAA,GAAuB,EAAE,CAAC,OAAH,CAAW,EAAX,EAAe,IAAf,CAA9B,CADJ;aAAA,MAAA;AAGI,qBAAO,CAAI,EAAA,GAAK,EAAR,GAAgB,CAAhB,GAAuB,CAAA,CAAxB,CAAP,CAHJ;aADJ;WAHJ;QAAA,CAbA;eAqBA,CAAC,CAAC,MAAF,GAAW,CAAC,CAAC,OAtBH;MAAA,EAAA;IAAA,CAAA,CAAA,CAAA,IAAA,CAhMd,CAAA;AAAA,IAwNA,MAAA,GAAS,SAAC,KAAD,GAAA;AACL,UAAA,wBAAA;AAAA,MAAA,OAAA,GAAU,EAAV,CAAA;AAAA,MACA,SAAA,GAAY,EADZ,CAAA;AAEA,WAAA,UAAA;qBAAA;AACI,QAAA,OAAQ,CAAA,CAAA,CAAR,GAAa,CAAb,CAAA;AACA,QAAA,IAAkC,MAAA,CAAA,CAAA,KAAY,QAA9C;AAAA,UAAA,SAAU,CAAA,CAAC,CAAC,WAAF,CAAA,CAAA,CAAV,GAA6B,CAA7B,CAAA;SAFJ;AAAA,OAFA;aAKA,SAAC,CAAD,EAAI,CAAJ,GAAA;AACI,QAAA,IAAG,oBAAA,IAAgB,oBAAnB;iBAAoC,OAAQ,CAAA,CAAA,CAAR,GAAa,OAAQ,CAAA,CAAA,EAAzD;SAAA,MACK,IAAG,kBAAH;iBAAoB,CAAA,EAApB;SAAA,MACA,IAAG,kBAAH;iBAAoB,EAApB;SAAA,MACA,IAAG,sBAAA,IAAkB,sBAArB;iBAAwC,SAAU,CAAA,CAAA,CAAV,GAAe,SAAU,CAAA,CAAA,EAAjE;SAAA,MACA,IAAG,oBAAH;iBAAsB,CAAA,EAAtB;SAAA,MACA,IAAG,oBAAH;iBAAsB,EAAtB;SAAA,MAAA;iBACA,WAAA,CAAY,CAAZ,EAAc,CAAd,EADA;SANT;MAAA,EANK;IAAA,CAxNT,CAAA;AAAA,IAuOA,OAAA,GAAU,SAAC,OAAD,EAAU,IAAV,GAAA;AACN,UAAA,IAAA;AAAA,MAAA,IAAG,eAAH;AACI,QAAA,IAAG,CAAC,CAAC,UAAF,CAAa,OAAb,CAAH;AACI,UAAA,IAAA,GAAO,OAAA,CAAQ,IAAR,CAAP,CAAA;AACA,UAAA,IAAe,CAAC,CAAC,UAAF,CAAa,IAAb,CAAf;AAAA,mBAAO,IAAP,CAAA;WAFJ;SAAA,MAGK,IAAG,qBAAH;AACD,iBAAO,OAAQ,CAAA,IAAA,CAAf,CADC;SAJT;OAAA;AAMA,aAAO,WAAP,CAPM;IAAA,CAvOV,CAAA;AAgPA;AAAA;;OAhPA;AAAA,IAoPM;AACW,MAAA,mBAAC,KAAD,EAAQ,IAAR,GAAA;AACT,YAAA,6CAAA;;UADiB,OAAO;SACxB;AAAA,2DAAA,CAAA;AAAA,qDAAA,CAAA;AAAA,qDAAA,CAAA;AAAA,iDAAA,CAAA;AAAA,+CAAA,CAAA;AAAA,QAAA,IAAC,CAAA,KAAD,GAAS,KAAT,CAAA;AAAA,QACA,IAAC,CAAA,UAAD,2CAAgC,mBAAmB,CAAC,KAApB,CAAA,CAAA,CAAA,CADhC,CAAA;AAAA,QAEA,IAAC,CAAA,cAAD,iDAAwC,OAFxC,CAAA;AAAA,QAGA,IAAC,CAAA,QAAD,uCAAwB,EAHxB,CAAA;AAAA,QAIA,IAAC,CAAA,QAAD,uCAAwB,EAJxB,CAAA;AAAA,QAKA,IAAC,CAAA,QAAD,uCAAwB,EALxB,CAAA;AAAA,QAMA,IAAC,CAAA,OAAD,0CAA0B,EAN1B,CAAA;AAAA,QAOA,IAAC,CAAA,iBAAD,oDAA8C,EAP9C,CAAA;AAAA,QAQA,IAAC,CAAA,MAAD,yCAAwB,CAAC,SAAA,GAAA;iBAAG,KAAH;QAAA,CAAD,CARxB,CAAA;AAAA,QASA,IAAC,CAAA,IAAD,GAAQ,EATR,CAAA;AAAA,QAUA,IAAC,CAAA,OAAD,GAAW,EAVX,CAAA;AAAA,QAWA,IAAC,CAAA,OAAD,GAAW,EAXX,CAAA;AAAA,QAYA,IAAC,CAAA,SAAD,GAAa,EAZb,CAAA;AAAA,QAaA,IAAC,CAAA,SAAD,GAAa,EAbb,CAAA;AAAA,QAcA,IAAC,CAAA,QAAD,GAAY,IAAC,CAAA,UAAD,CAAY,IAAZ,EAAkB,EAAlB,EAAsB,EAAtB,CAdZ,CAAA;AAAA,QAeA,IAAC,CAAA,MAAD,GAAU,KAfV,CAAA;AAAA,QAkBA,SAAS,CAAC,aAAV,CAAwB,IAAC,CAAA,KAAzB,EAAgC,IAAC,CAAA,iBAAjC,EAAoD,CAAA,SAAA,KAAA,GAAA;iBAAA,SAAC,MAAD,GAAA;AAChD,YAAA,IAA0B,KAAC,CAAA,MAAD,CAAQ,MAAR,CAA1B;qBAAA,KAAC,CAAA,aAAD,CAAe,MAAf,EAAA;aADgD;UAAA,EAAA;QAAA,CAAA,CAAA,CAAA,IAAA,CAApD,CAlBA,CADS;MAAA,CAAb;;AAAA,MAuBA,SAAC,CAAA,aAAD,GAAiB,SAAC,KAAD,EAAQ,iBAAR,EAA2B,CAA3B,GAAA;AACb,YAAA,mFAAA;AAAA,QAAA,IAAG,CAAC,CAAC,aAAF,CAAgB,iBAAhB,CAAH;AACI,UAAA,SAAA,GAAY,CAAZ,CADJ;SAAA,MAAA;AAGI,UAAA,SAAA,GAAY,SAAC,MAAD,GAAA;AACR,gBAAA,SAAA;AAAA,iBAAA,sBAAA;uCAAA;AAAA,cAAA,MAAO,CAAA,CAAA,CAAP,qCAAwB,MAAO,CAAA,CAAA,CAA/B,CAAA;AAAA,aAAA;mBACA,CAAA,CAAE,MAAF,EAFQ;UAAA,CAAZ,CAHJ;SAAA;AAQA,QAAA,IAAG,CAAC,CAAC,UAAF,CAAa,KAAb,CAAH;iBACI,KAAA,CAAM,SAAN,EADJ;SAAA,MAEK,IAAG,CAAC,CAAC,OAAF,CAAU,KAAV,CAAH;AACD,UAAA,IAAG,CAAC,CAAC,OAAF,CAAU,KAAM,CAAA,CAAA,CAAhB,CAAH;AACI;iBAAA,UAAA;;uCAAA;oBAAuC,CAAA,GAAI;;eACvC;AAAA,cAAA,MAAA,GAAS,EAAT,CAAA;AACA;AAAA,mBAAA,QAAA;;2BAAA;AAAA,gBAAA,MAAO,CAAA,CAAA,CAAP,GAAY,aAAc,CAAA,CAAA,CAA1B,CAAA;AAAA,eADA;AAAA,2BAEA,SAAA,CAAU,MAAV,EAFA,CADJ;AAAA;2BADJ;WAAA,MAAA;AAMI;iBAAA,yCAAA;gCAAA;AAAA,4BAAA,SAAA,CAAU,MAAV,EAAA,CAAA;AAAA;4BANJ;WADC;SAAA,MAQA,IAAG,KAAA,YAAiB,MAApB;AACD,UAAA,OAAA,GAAU,EAAV,CAAA;AAAA,UACA,CAAA,CAAE,iBAAF,EAAqB,KAArB,CAA2B,CAAC,IAA5B,CAAiC,SAAC,CAAD,GAAA;mBAAO,OAAO,CAAC,IAAR,CAAa,CAAA,CAAE,IAAF,CAAO,CAAC,IAAR,CAAA,CAAb,EAAP;UAAA,CAAjC,CADA,CAAA;iBAEA,CAAA,CAAE,YAAF,EAAgB,KAAhB,CAAsB,CAAC,IAAvB,CAA4B,SAAC,CAAD,GAAA;AACxB,YAAA,MAAA,GAAS,EAAT,CAAA;AAAA,YACA,CAAA,CAAE,IAAF,EAAQ,IAAR,CAAa,CAAC,IAAd,CAAmB,SAAC,CAAD,GAAA;qBAAO,MAAO,CAAA,OAAQ,CAAA,CAAA,CAAR,CAAP,GAAqB,CAAA,CAAE,IAAF,CAAO,CAAC,IAAR,CAAA,EAA5B;YAAA,CAAnB,CADA,CAAA;mBAEA,SAAA,CAAU,MAAV,EAHwB;UAAA,CAA5B,EAHC;SAAA,MAAA;AAQD,gBAAU,IAAA,KAAA,CAAM,sBAAN,CAAV,CARC;SAnBQ;MAAA,CAvBjB,CAAA;;AAAA,0BAoDA,qBAAA,GAAuB,SAAC,QAAD,EAAW,QAAX,GAAA;eACnB,SAAS,CAAC,aAAV,CAAwB,IAAC,CAAA,KAAzB,EAAgC,IAAC,CAAA,iBAAjC,EAAoD,CAAA,SAAA,KAAA,GAAA;iBAAA,SAAC,MAAD,GAAA;AAChD,gBAAA,SAAA;AAAA,YAAA,IAAU,CAAA,KAAK,CAAA,MAAD,CAAQ,MAAR,CAAd;AAAA,oBAAA,CAAA;aAAA;AACA,iBAAA,aAAA;8BAAA;AACI,cAAA,IAAU,CAAA,KAAK,mCAAa,MAAb,CAAf;AAAA,sBAAA,CAAA;eADJ;AAAA,aADA;mBAGA,QAAA,CAAS,MAAT,EAJgD;UAAA,EAAA;QAAA,CAAA,CAAA,CAAA,IAAA,CAApD,EADmB;MAAA,CApDvB,CAAA;;AAAA,0BA2DA,OAAA,GAAS,SAAC,KAAD,GAAA;AACL,YAAA,aAAA;AAAA,QAAA,UAAA;;AAAc;eAAA,yCAAA;yBAAA;AAAA,yBAAA,OAAA,CAAQ,IAAC,CAAA,OAAT,EAAkB,CAAlB,EAAA,CAAA;AAAA;;qBAAd,CAAA;eACA,SAAC,CAAD,EAAG,CAAH,GAAA;AACI,cAAA,qBAAA;AAAA,eAAA,eAAA;;mCAAA;AACI,YAAA,UAAA,GAAa,MAAA,CAAO,CAAE,CAAA,CAAA,CAAT,EAAa,CAAE,CAAA,CAAA,CAAf,CAAb,CAAA;AACA,YAAA,IAAqB,UAAA,KAAc,CAAnC;AAAA,qBAAO,UAAP,CAAA;aAFJ;AAAA,WAAA;AAGA,iBAAO,CAAP,CAJJ;QAAA,EAFK;MAAA,CA3DT,CAAA;;AAAA,0BAmEA,QAAA,GAAU,SAAA,GAAA;AACN,QAAA,IAAG,CAAA,IAAK,CAAA,MAAR;AACI,UAAA,IAAC,CAAA,MAAD,GAAU,IAAV,CAAA;AAAA,UACA,IAAC,CAAA,OAAO,CAAC,IAAT,CAAc,IAAC,CAAA,OAAD,CAAS,IAAC,CAAA,QAAV,CAAd,CADA,CAAA;iBAEA,IAAC,CAAA,OAAO,CAAC,IAAT,CAAc,IAAC,CAAA,OAAD,CAAS,IAAC,CAAA,QAAV,CAAd,EAHJ;SADM;MAAA,CAnEV,CAAA;;AAAA,0BAyEA,UAAA,GAAY,SAAA,GAAA;AACR,QAAA,IAAC,CAAA,QAAD,CAAA,CAAA,CAAA;AACA,eAAO,IAAC,CAAA,OAAR,CAFQ;MAAA,CAzEZ,CAAA;;AAAA,0BA6EA,UAAA,GAAY,SAAA,GAAA;AACR,QAAA,IAAC,CAAA,QAAD,CAAA,CAAA,CAAA;AACA,eAAO,IAAC,CAAA,OAAR,CAFQ;MAAA,CA7EZ,CAAA;;AAAA,0BAiFA,aAAA,GAAe,SAAC,MAAD,GAAA;AACX,YAAA,kFAAA;AAAA,QAAA,MAAA,GAAS,EAAT,CAAA;AAAA,QACA,MAAA,GAAS,EADT,CAAA;AAEA;AAAA,aAAA,uCAAA;qBAAA;AAAA,UAAA,MAAM,CAAC,IAAP,qCAAwB,MAAxB,CAAA,CAAA;AAAA,SAFA;AAGA;AAAA,aAAA,wCAAA;sBAAA;AAAA,UAAA,MAAM,CAAC,IAAP,qCAAwB,MAAxB,CAAA,CAAA;AAAA,SAHA;AAAA,QAIA,UAAA,GAAa,MAAM,CAAC,IAAP,CAAY,MAAM,CAAC,YAAP,CAAoB,CAApB,CAAZ,CAJb,CAAA;AAAA,QAKA,UAAA,GAAa,MAAM,CAAC,IAAP,CAAY,MAAM,CAAC,YAAP,CAAoB,CAApB,CAAZ,CALb,CAAA;AAAA,QAOA,IAAC,CAAA,QAAQ,CAAC,IAAV,CAAe,MAAf,CAPA,CAAA;AASA,QAAA,IAAG,MAAM,CAAC,MAAP,KAAiB,CAApB;AACI,UAAA,IAAG,CAAA,IAAK,CAAA,SAAU,CAAA,UAAA,CAAlB;AACI,YAAA,IAAC,CAAA,OAAO,CAAC,IAAT,CAAc,MAAd,CAAA,CAAA;AAAA,YACA,IAAC,CAAA,SAAU,CAAA,UAAA,CAAX,GAAyB,IAAC,CAAA,UAAD,CAAY,IAAZ,EAAkB,MAAlB,EAA0B,EAA1B,CADzB,CADJ;WAAA;AAAA,UAGA,IAAC,CAAA,SAAU,CAAA,UAAA,CAAW,CAAC,IAAvB,CAA4B,MAA5B,CAHA,CADJ;SATA;AAeA,QAAA,IAAG,MAAM,CAAC,MAAP,KAAiB,CAApB;AACI,UAAA,IAAG,CAAA,IAAK,CAAA,SAAU,CAAA,UAAA,CAAlB;AACI,YAAA,IAAC,CAAA,OAAO,CAAC,IAAT,CAAc,MAAd,CAAA,CAAA;AAAA,YACA,IAAC,CAAA,SAAU,CAAA,UAAA,CAAX,GAAyB,IAAC,CAAA,UAAD,CAAY,IAAZ,EAAkB,EAAlB,EAAsB,MAAtB,CADzB,CADJ;WAAA;AAAA,UAGA,IAAC,CAAA,SAAU,CAAA,UAAA,CAAW,CAAC,IAAvB,CAA4B,MAA5B,CAHA,CADJ;SAfA;AAqBA,QAAA,IAAG,MAAM,CAAC,MAAP,KAAiB,CAAjB,IAAuB,MAAM,CAAC,MAAP,KAAiB,CAA3C;AACI,UAAA,IAAG,CAAA,IAAK,CAAA,IAAK,CAAA,UAAA,CAAb;AACI,YAAA,IAAC,CAAA,IAAK,CAAA,UAAA,CAAN,GAAoB,EAApB,CADJ;WAAA;AAEA,UAAA,IAAG,CAAA,IAAK,CAAA,IAAK,CAAA,UAAA,CAAY,CAAA,UAAA,CAAzB;AACI,YAAA,IAAC,CAAA,IAAK,CAAA,UAAA,CAAY,CAAA,UAAA,CAAlB,GAAgC,IAAC,CAAA,UAAD,CAAY,IAAZ,EAAkB,MAAlB,EAA0B,MAA1B,CAAhC,CADJ;WAFA;iBAIA,IAAC,CAAA,IAAK,CAAA,UAAA,CAAY,CAAA,UAAA,CAAW,CAAC,IAA9B,CAAmC,MAAnC,EALJ;SAtBW;MAAA,CAjFf,CAAA;;AAAA,0BA8GA,aAAA,GAAe,SAAC,MAAD,EAAS,MAAT,GAAA;AACX,YAAA,2BAAA;AAAA,QAAA,UAAA,GAAa,MAAM,CAAC,IAAP,CAAY,MAAM,CAAC,YAAP,CAAoB,CAApB,CAAZ,CAAb,CAAA;AAAA,QACA,UAAA,GAAa,MAAM,CAAC,IAAP,CAAY,MAAM,CAAC,YAAP,CAAoB,CAApB,CAAZ,CADb,CAAA;AAEA,QAAA,IAAG,MAAM,CAAC,MAAP,KAAiB,CAAjB,IAAuB,MAAM,CAAC,MAAP,KAAiB,CAA3C;AACI,UAAA,GAAA,GAAM,IAAC,CAAA,QAAP,CADJ;SAAA,MAEK,IAAG,MAAM,CAAC,MAAP,KAAiB,CAApB;AACD,UAAA,GAAA,GAAM,IAAC,CAAA,SAAU,CAAA,UAAA,CAAjB,CADC;SAAA,MAEA,IAAG,MAAM,CAAC,MAAP,KAAiB,CAApB;AACD,UAAA,GAAA,GAAM,IAAC,CAAA,SAAU,CAAA,UAAA,CAAjB,CADC;SAAA,MAAA;AAGD,UAAA,GAAA,GAAM,IAAC,CAAA,IAAK,CAAA,UAAA,CAAY,CAAA,UAAA,CAAxB,CAHC;SANL;AAUA,6BAAO,MAAM;AAAA,UAAC,KAAA,EAAO,CAAC,SAAA,GAAA;mBAAG,KAAH;UAAA,CAAD,CAAR;AAAA,UAAmB,MAAA,EAAQ,SAAA,GAAA;mBAAG,GAAH;UAAA,CAA3B;SAAb,CAXW;MAAA,CA9Gf,CAAA;;uBAAA;;QArPJ,CAAA;AAAA,IAiXA,CAAC,CAAC,cAAF,GAAmB;AAAA,MAAC,qBAAA,mBAAD;AAAA,MAAsB,aAAA,WAAtB;AAAA,MAAmC,WAAA,SAAnC;AAAA,MAA8C,UAAA,QAA9C;AAAA,MAAwD,SAAA,OAAxD;AAAA,MACf,aAAA,WADe;AAAA,MACF,cAAA,YADE;AAAA,MACY,QAAA,MADZ;AAAA,MACoB,WAAA,SADpB;KAjXnB,CAAA;AAoXA;AAAA;;OApXA;AAAA,IAwXA,kBAAA,GAAqB,SAAC,SAAD,EAAY,IAAZ,GAAA;AAEjB,UAAA,iLAAA;AAAA,MAAA,QAAA,GACI;AAAA,QAAA,KAAA,EAAO;AAAA,UAAA,aAAA,EAAe,IAAf;SAAP;AAAA,QACA,aAAA,EAAe;AAAA,UAAA,MAAA,EAAQ,QAAR;SADf;OADJ,CAAA;AAAA,MAIA,IAAA,GAAO,CAAC,CAAC,MAAF,CAAS,IAAT,EAAe,EAAf,EAAmB,QAAnB,EAA6B,IAA7B,CAJP,CAAA;AAAA,MAMA,QAAA,GAAW,SAAS,CAAC,QANrB,CAAA;AAAA,MAOA,QAAA,GAAW,SAAS,CAAC,QAPrB,CAAA;AAAA,MAQA,OAAA,GAAU,SAAS,CAAC,UAAV,CAAA,CARV,CAAA;AAAA,MASA,OAAA,GAAU,SAAS,CAAC,UAAV,CAAA,CATV,CAAA;AAWA,MAAA,IAAG,IAAI,CAAC,KAAK,CAAC,aAAd;AACI,QAAA,eAAA,GAAkB,SAAC,KAAD,EAAQ,SAAR,EAAmB,SAAnB,GAAA;AACd,cAAA,gBAAA;AAAA,UAAA,OAAA,GAAU,EAAV,CAAA;AACA,eAAA,aAAA;;+BAAA;gBAA8D;AAA9D,cAAA,OAAQ,CAAA,IAAA,CAAR,GAAgB,SAAU,CAAA,CAAA,CAA1B;aAAA;AAAA,WADA;AAEA,eAAA,aAAA;;+BAAA;gBAA8D;AAA9D,cAAA,OAAQ,CAAA,IAAA,CAAR,GAAgB,SAAU,CAAA,CAAA,CAA1B;aAAA;AAAA,WAFA;AAGA,iBAAO,SAAC,CAAD,GAAA;mBAAO,IAAI,CAAC,KAAK,CAAC,aAAX,CAAyB,CAAzB,EAA4B,KAA5B,EAAmC,OAAnC,EAA4C,SAA5C,EAAP;UAAA,CAAP,CAJc;QAAA,CAAlB,CADJ;OAXA;AAAA,MAmBA,MAAA,GAAS,QAAQ,CAAC,aAAT,CAAuB,OAAvB,CAnBT,CAAA;AAAA,MAoBA,MAAM,CAAC,SAAP,GAAmB,UApBnB,CAAA;AAAA,MAuBA,QAAA,GAAW,SAAC,GAAD,EAAM,CAAN,EAAS,CAAT,GAAA;AACP,YAAA,qCAAA;AAAA,QAAA,IAAG,CAAA,KAAK,CAAR;AACI,UAAA,MAAA,GAAS,IAAT,CAAA;AACA,eAAS,4EAAT,GAAA;AACI,YAAA,IAAG,GAAI,CAAA,CAAA,GAAE,CAAF,CAAK,CAAA,CAAA,CAAT,KAAe,GAAI,CAAA,CAAA,CAAG,CAAA,CAAA,CAAzB;AACI,cAAA,MAAA,GAAS,KAAT,CADJ;aADJ;AAAA,WADA;AAIA,UAAA,IAAG,MAAH;AACE,mBAAO,CAAA,CAAP,CADF;WALJ;SAAA;AAAA,QAOA,GAAA,GAAM,CAPN,CAAA;AAQA,eAAM,CAAA,GAAE,GAAF,GAAQ,GAAG,CAAC,MAAlB,GAAA;AACI,UAAA,IAAA,GAAO,KAAP,CAAA;AACA,eAAS,iFAAT,GAAA;AACI,YAAA,IAAe,GAAI,CAAA,CAAA,CAAG,CAAA,CAAA,CAAP,KAAa,GAAI,CAAA,CAAA,GAAE,GAAF,CAAO,CAAA,CAAA,CAAvC;AAAA,cAAA,IAAA,GAAO,IAAP,CAAA;aADJ;AAAA,WADA;AAGA,UAAA,IAAS,IAAT;AAAA,kBAAA;WAHA;AAAA,UAIA,GAAA,EAJA,CADJ;QAAA,CARA;AAcA,eAAO,GAAP,CAfO;MAAA,CAvBX,CAAA;AAAA,MAyCA,KAAA,GAAQ,QAAQ,CAAC,aAAT,CAAuB,OAAvB,CAzCR,CAAA;AA0CA,WAAA,aAAA;;wBAAA;AACI,QAAA,EAAA,GAAK,QAAQ,CAAC,aAAT,CAAuB,IAAvB,CAAL,CAAA;AACA,QAAA,IAAG,QAAA,CAAS,CAAT,CAAA,KAAe,CAAf,IAAqB,QAAQ,CAAC,MAAT,KAAmB,CAA3C;AACI,UAAA,EAAA,GAAK,QAAQ,CAAC,aAAT,CAAuB,IAAvB,CAAL,CAAA;AAAA,UACA,EAAE,CAAC,YAAH,CAAgB,SAAhB,EAA2B,QAAQ,CAAC,MAApC,CADA,CAAA;AAAA,UAEA,EAAE,CAAC,YAAH,CAAgB,SAAhB,EAA2B,QAAQ,CAAC,MAApC,CAFA,CAAA;AAAA,UAGA,EAAE,CAAC,WAAH,CAAe,EAAf,CAHA,CADJ;SADA;AAAA,QAMA,EAAA,GAAK,QAAQ,CAAC,aAAT,CAAuB,IAAvB,CANL,CAAA;AAAA,QAOA,EAAE,CAAC,SAAH,GAAe,cAPf,CAAA;AAAA,QAQA,EAAE,CAAC,WAAH,GAAiB,CARjB,CAAA;AAAA,QASA,EAAE,CAAC,WAAH,CAAe,EAAf,CATA,CAAA;AAUA,aAAA,YAAA;;8BAAA;AACI,UAAA,CAAA,GAAI,QAAA,CAAS,OAAT,EAAkB,QAAA,CAAS,CAAT,CAAlB,EAA+B,QAAA,CAAS,CAAT,CAA/B,CAAJ,CAAA;AACA,UAAA,IAAG,CAAA,KAAK,CAAA,CAAR;AACI,YAAA,EAAA,GAAK,QAAQ,CAAC,aAAT,CAAuB,IAAvB,CAAL,CAAA;AAAA,YACA,EAAE,CAAC,SAAH,GAAe,aADf,CAAA;AAAA,YAEA,EAAE,CAAC,WAAH,GAAiB,MAAO,CAAA,CAAA,CAFxB,CAAA;AAAA,YAGA,EAAE,CAAC,YAAH,CAAgB,SAAhB,EAA2B,CAA3B,CAHA,CAAA;AAIA,YAAA,IAAG,QAAA,CAAS,CAAT,CAAA,KAAe,QAAQ,CAAC,MAAT,GAAgB,CAA/B,IAAqC,QAAQ,CAAC,MAAT,KAAmB,CAA3D;AACI,cAAA,EAAE,CAAC,YAAH,CAAgB,SAAhB,EAA2B,CAA3B,CAAA,CADJ;aAJA;AAAA,YAMA,EAAE,CAAC,WAAH,CAAe,EAAf,CANA,CADJ;WAFJ;AAAA,SAVA;AAoBA,QAAA,IAAG,QAAA,CAAS,CAAT,CAAA,KAAe,CAAlB;AACI,UAAA,EAAA,GAAK,QAAQ,CAAC,aAAT,CAAuB,IAAvB,CAAL,CAAA;AAAA,UACA,EAAE,CAAC,SAAH,GAAe,eADf,CAAA;AAAA,UAEA,EAAE,CAAC,SAAH,GAAe,IAAI,CAAC,aAAa,CAAC,MAFlC,CAAA;AAAA,UAGA,EAAE,CAAC,YAAH,CAAgB,SAAhB,EAA2B,QAAQ,CAAC,MAAT,GAAkB,CAAI,QAAQ,CAAC,MAAT,KAAkB,CAArB,GAA4B,CAA5B,GAAmC,CAApC,CAA7C,CAHA,CAAA;AAAA,UAIA,EAAE,CAAC,WAAH,CAAe,EAAf,CAJA,CADJ;SApBA;AAAA,QA0BA,KAAK,CAAC,WAAN,CAAkB,EAAlB,CA1BA,CADJ;AAAA,OA1CA;AAwEA,MAAA,IAAG,QAAQ,CAAC,MAAT,KAAkB,CAArB;AACI,QAAA,EAAA,GAAK,QAAQ,CAAC,aAAT,CAAuB,IAAvB,CAAL,CAAA;AACA,aAAA,aAAA;;0BAAA;AACI,UAAA,EAAA,GAAK,QAAQ,CAAC,aAAT,CAAuB,IAAvB,CAAL,CAAA;AAAA,UACA,EAAE,CAAC,SAAH,GAAe,cADf,CAAA;AAAA,UAEA,EAAE,CAAC,WAAH,GAAiB,CAFjB,CAAA;AAAA,UAGA,EAAE,CAAC,WAAH,CAAe,EAAf,CAHA,CADJ;AAAA,SADA;AAAA,QAMA,EAAA,GAAK,QAAQ,CAAC,aAAT,CAAuB,IAAvB,CANL,CAAA;AAOA,QAAA,IAAG,QAAQ,CAAC,MAAT,KAAkB,CAArB;AACI,UAAA,EAAE,CAAC,SAAH,GAAe,eAAf,CAAA;AAAA,UACA,EAAE,CAAC,SAAH,GAAe,IAAI,CAAC,aAAa,CAAC,MADlC,CADJ;SAPA;AAAA,QAUA,EAAE,CAAC,WAAH,CAAe,EAAf,CAVA,CAAA;AAAA,QAWA,KAAK,CAAC,WAAN,CAAkB,EAAlB,CAXA,CADJ;OAxEA;AAAA,MAqFA,MAAM,CAAC,WAAP,CAAmB,KAAnB,CArFA,CAAA;AAAA,MAwFA,KAAA,GAAQ,QAAQ,CAAC,aAAT,CAAuB,OAAvB,CAxFR,CAAA;AAyFA,WAAA,YAAA;;4BAAA;AACI,QAAA,EAAA,GAAK,QAAQ,CAAC,aAAT,CAAuB,IAAvB,CAAL,CAAA;AACA,aAAA,WAAA;;0BAAA;AACI,UAAA,CAAA,GAAI,QAAA,CAAS,OAAT,EAAkB,QAAA,CAAS,CAAT,CAAlB,EAA+B,QAAA,CAAS,CAAT,CAA/B,CAAJ,CAAA;AACA,UAAA,IAAG,CAAA,KAAK,CAAA,CAAR;AACI,YAAA,EAAA,GAAK,QAAQ,CAAC,aAAT,CAAuB,IAAvB,CAAL,CAAA;AAAA,YACA,EAAE,CAAC,SAAH,GAAe,aADf,CAAA;AAAA,YAEA,EAAE,CAAC,WAAH,GAAiB,GAFjB,CAAA;AAAA,YAGA,EAAE,CAAC,YAAH,CAAgB,SAAhB,EAA2B,CAA3B,CAHA,CAAA;AAIA,YAAA,IAAG,QAAA,CAAS,CAAT,CAAA,KAAe,QAAQ,CAAC,MAAT,GAAgB,CAA/B,IAAqC,QAAQ,CAAC,MAAT,KAAkB,CAA1D;AACI,cAAA,EAAE,CAAC,YAAH,CAAgB,SAAhB,EAA0B,CAA1B,CAAA,CADJ;aAJA;AAAA,YAMA,EAAE,CAAC,WAAH,CAAe,EAAf,CANA,CADJ;WAFJ;AAAA,SADA;AAWA,aAAA,YAAA;;8BAAA;AACI,UAAA,UAAA,GAAa,SAAS,CAAC,aAAV,CAAwB,MAAxB,EAAgC,MAAhC,CAAb,CAAA;AAAA,UACA,GAAA,GAAM,UAAU,CAAC,KAAX,CAAA,CADN,CAAA;AAAA,UAEA,EAAA,GAAK,QAAQ,CAAC,aAAT,CAAuB,IAAvB,CAFL,CAAA;AAAA,UAGA,EAAE,CAAC,SAAH,GAAe,YAAA,GAAa,CAAb,GAAe,MAAf,GAAqB,CAHpC,CAAA;AAAA,UAIA,EAAE,CAAC,WAAH,GAAiB,UAAU,CAAC,MAAX,CAAkB,GAAlB,CAJjB,CAAA;AAAA,UAKA,EAAE,CAAC,YAAH,CAAgB,YAAhB,EAA8B,GAA9B,CALA,CAAA;AAMA,UAAA,IAAG,uBAAH;AACI,YAAA,EAAE,CAAC,OAAH,GAAa,eAAA,CAAgB,GAAhB,EAAqB,MAArB,EAA6B,MAA7B,CAAb,CADJ;WANA;AAAA,UAQA,EAAE,CAAC,WAAH,CAAe,EAAf,CARA,CADJ;AAAA,SAXA;AAAA,QAsBA,eAAA,GAAkB,SAAS,CAAC,aAAV,CAAwB,MAAxB,EAAgC,EAAhC,CAtBlB,CAAA;AAAA,QAuBA,GAAA,GAAM,eAAe,CAAC,KAAhB,CAAA,CAvBN,CAAA;AAAA,QAwBA,EAAA,GAAK,QAAQ,CAAC,aAAT,CAAuB,IAAvB,CAxBL,CAAA;AAAA,QAyBA,EAAE,CAAC,SAAH,GAAe,mBAzBf,CAAA;AAAA,QA0BA,EAAE,CAAC,WAAH,GAAiB,eAAe,CAAC,MAAhB,CAAuB,GAAvB,CA1BjB,CAAA;AAAA,QA2BA,EAAE,CAAC,YAAH,CAAgB,YAAhB,EAA8B,GAA9B,CA3BA,CAAA;AA4BA,QAAA,IAAG,uBAAH;AACI,UAAA,EAAE,CAAC,OAAH,GAAa,eAAA,CAAgB,GAAhB,EAAqB,MAArB,EAA6B,EAA7B,CAAb,CADJ;SA5BA;AAAA,QA8BA,EAAE,CAAC,YAAH,CAAgB,UAAhB,EAA4B,KAAA,GAAM,CAAlC,CA9BA,CAAA;AAAA,QA+BA,EAAE,CAAC,WAAH,CAAe,EAAf,CA/BA,CAAA;AAAA,QAgCA,KAAK,CAAC,WAAN,CAAkB,EAAlB,CAhCA,CADJ;AAAA,OAzFA;AAAA,MA6HA,EAAA,GAAK,QAAQ,CAAC,aAAT,CAAuB,IAAvB,CA7HL,CAAA;AAAA,MA8HA,EAAA,GAAK,QAAQ,CAAC,aAAT,CAAuB,IAAvB,CA9HL,CAAA;AAAA,MA+HA,EAAE,CAAC,SAAH,GAAe,eA/Hf,CAAA;AAAA,MAgIA,EAAE,CAAC,SAAH,GAAe,IAAI,CAAC,aAAa,CAAC,MAhIlC,CAAA;AAAA,MAiIA,EAAE,CAAC,YAAH,CAAgB,SAAhB,EAA2B,QAAQ,CAAC,MAAT,GAAkB,CAAI,QAAQ,CAAC,MAAT,KAAmB,CAAtB,GAA6B,CAA7B,GAAoC,CAArC,CAA7C,CAjIA,CAAA;AAAA,MAkIA,EAAE,CAAC,WAAH,CAAe,EAAf,CAlIA,CAAA;AAmIA,WAAA,YAAA;;4BAAA;AACI,QAAA,eAAA,GAAkB,SAAS,CAAC,aAAV,CAAwB,EAAxB,EAA4B,MAA5B,CAAlB,CAAA;AAAA,QACA,GAAA,GAAM,eAAe,CAAC,KAAhB,CAAA,CADN,CAAA;AAAA,QAEA,EAAA,GAAK,QAAQ,CAAC,aAAT,CAAuB,IAAvB,CAFL,CAAA;AAAA,QAGA,EAAE,CAAC,SAAH,GAAe,mBAHf,CAAA;AAAA,QAIA,EAAE,CAAC,WAAH,GAAiB,eAAe,CAAC,MAAhB,CAAuB,GAAvB,CAJjB,CAAA;AAAA,QAKA,EAAE,CAAC,YAAH,CAAgB,YAAhB,EAA8B,GAA9B,CALA,CAAA;AAMA,QAAA,IAAG,uBAAH;AACI,UAAA,EAAE,CAAC,OAAH,GAAa,eAAA,CAAgB,GAAhB,EAAqB,EAArB,EAAyB,MAAzB,CAAb,CADJ;SANA;AAAA,QAQA,EAAE,CAAC,YAAH,CAAgB,UAAhB,EAA4B,KAAA,GAAM,CAAlC,CARA,CAAA;AAAA,QASA,EAAE,CAAC,WAAH,CAAe,EAAf,CATA,CADJ;AAAA,OAnIA;AAAA,MA8IA,eAAA,GAAkB,SAAS,CAAC,aAAV,CAAwB,EAAxB,EAA4B,EAA5B,CA9IlB,CAAA;AAAA,MA+IA,GAAA,GAAM,eAAe,CAAC,KAAhB,CAAA,CA/IN,CAAA;AAAA,MAgJA,EAAA,GAAK,QAAQ,CAAC,aAAT,CAAuB,IAAvB,CAhJL,CAAA;AAAA,MAiJA,EAAE,CAAC,SAAH,GAAe,eAjJf,CAAA;AAAA,MAkJA,EAAE,CAAC,WAAH,GAAiB,eAAe,CAAC,MAAhB,CAAuB,GAAvB,CAlJjB,CAAA;AAAA,MAmJA,EAAE,CAAC,YAAH,CAAgB,YAAhB,EAA8B,GAA9B,CAnJA,CAAA;AAoJA,MAAA,IAAG,uBAAH;AACI,QAAA,EAAE,CAAC,OAAH,GAAa,eAAA,CAAgB,GAAhB,EAAqB,EAArB,EAAyB,EAAzB,CAAb,CADJ;OApJA;AAAA,MAsJA,EAAE,CAAC,WAAH,CAAe,EAAf,CAtJA,CAAA;AAAA,MAuJA,KAAK,CAAC,WAAN,CAAkB,EAAlB,CAvJA,CAAA;AAAA,MAwJA,MAAM,CAAC,WAAP,CAAmB,KAAnB,CAxJA,CAAA;AAAA,MA2JA,MAAM,CAAC,YAAP,CAAoB,cAApB,EAAoC,OAAO,CAAC,MAA5C,CA3JA,CAAA;AAAA,MA4JA,MAAM,CAAC,YAAP,CAAoB,cAApB,EAAoC,OAAO,CAAC,MAA5C,CA5JA,CAAA;AA8JA,aAAO,MAAP,CAhKiB;IAAA,CAxXrB,CAAA;AA0hBA;AAAA;;OA1hBA;AAAA,IA8hBA,CAAC,CAAC,EAAE,CAAC,KAAL,GAAa,SAAC,KAAD,EAAQ,SAAR,EAAmB,MAAnB,GAAA;AACT,UAAA,sEAAA;;QAD4B,SAAO;OACnC;AAAA,MAAA,IAAqB,uBAArB;AAAA,QAAA,MAAA,GAAS,IAAT,CAAA;OAAA;AAAA,MACA,QAAA,GACI;AAAA,QAAA,IAAA,EAAO,EAAP;AAAA,QAAW,IAAA,EAAM,EAAjB;AAAA,QAAqB,IAAA,EAAM,EAA3B;AAAA,QACA,SAAA,EAAW,SADX;AAAA,QAEA,MAAA,EAAQ,SAAA,GAAA;iBAAG,KAAH;QAAA,CAFR;AAAA,QAGA,UAAA,EAAY,mBAAmB,CAAC,KAApB,CAAA,CAAA,CAAA,CAHZ;AAAA,QAIA,cAAA,EAAgB,OAJhB;AAAA,QAKA,OAAA,EAAS,EALT;AAAA,QAMA,iBAAA,EAAmB,EANnB;AAAA,QAOA,QAAA,EAAU,kBAPV;OAFJ,CAAA;AAAA,MAWA,aAAA,GAAgB,CAAC,CAAC,MAAF,CAAS,IAAT,EAAe,EAAf,EAAmB,OAAO,CAAC,EAAE,CAAC,aAA9B,EAA6C,OAAQ,CAAA,MAAA,CAAO,CAAC,aAA7D,CAXhB,CAAA;AAAA,MAYA,cAAA,GACI;AAAA,QAAA,eAAA,EAAiB;AAAA,UAAC,eAAA,aAAD;SAAjB;AAAA,QACA,aAAA,EAAe,aADf;OAbJ,CAAA;AAAA,MAgBA,IAAA,GAAO,CAAC,CAAC,MAAF,CAAS,IAAT,EAAe,EAAf,EAAmB,cAAnB,EAAmC,CAAC,CAAC,MAAF,CAAS,EAAT,EAAa,QAAb,EAAuB,SAAvB,CAAnC,CAhBP,CAAA;AAAA,MAkBA,MAAA,GAAS,IAlBT,CAAA;AAmBA;AACI,QAAA,SAAA,GAAgB,IAAA,IAAI,CAAC,SAAL,CAAe,KAAf,EAAsB,IAAtB,CAAhB,CAAA;AACA;AACI,UAAA,MAAA,GAAS,IAAI,CAAC,QAAL,CAAc,SAAd,EAAyB,IAAI,CAAC,eAA9B,CAAT,CADJ;SAAA,cAAA;AAGI,UADE,UACF,CAAA;AAAA,UAAA,IAA0B,kDAA1B;AAAA,YAAA,OAAO,CAAC,KAAR,CAAc,CAAC,CAAC,KAAhB,CAAA,CAAA;WAAA;AAAA,UACA,MAAA,GAAS,CAAA,CAAE,QAAF,CAAW,CAAC,IAAZ,CAAiB,IAAI,CAAC,aAAa,CAAC,WAApC,CADT,CAHJ;SAFJ;OAAA,cAAA;AAQI,QADE,UACF,CAAA;AAAA,QAAA,IAA0B,kDAA1B;AAAA,UAAA,OAAO,CAAC,KAAR,CAAc,CAAC,CAAC,KAAhB,CAAA,CAAA;SAAA;AAAA,QACA,MAAA,GAAS,CAAA,CAAE,QAAF,CAAW,CAAC,IAAZ,CAAiB,IAAI,CAAC,aAAa,CAAC,YAApC,CADT,CARJ;OAnBA;AAAA,MA8BA,CAAA,GAAI,IAAK,CAAA,CAAA,CA9BT,CAAA;AA+B2B,aAAM,CAAC,CAAC,aAAF,CAAA,CAAN,GAAA;AAA3B,QAAA,CAAC,CAAC,WAAF,CAAc,CAAC,CAAC,SAAhB,CAAA,CAA2B;MAAA,CA/B3B;AAgCA,aAAO,IAAC,CAAA,MAAD,CAAQ,MAAR,CAAP,CAjCS;IAAA,CA9hBb,CAAA;AAkkBA;AAAA;;OAlkBA;AAAA,IAskBA,CAAC,CAAC,EAAE,CAAC,OAAL,GAAe,SAAC,KAAD,EAAQ,SAAR,EAAmB,SAAnB,EAAsC,MAAtC,GAAA;AACX,UAAA,uYAAA;;QAD8B,YAAY;OAC1C;;QADiD,SAAO;OACxD;AAAA,MAAA,IAAqB,uBAArB;AAAA,QAAA,MAAA,GAAS,IAAT,CAAA;OAAA;AAAA,MACA,QAAA,GACI;AAAA,QAAA,iBAAA,EAAmB,EAAnB;AAAA,QACA,WAAA,EAAa,OAAQ,CAAA,MAAA,CAAO,CAAC,WAD7B;AAAA,QAEA,SAAA,EAAW,OAAQ,CAAA,MAAA,CAAO,CAAC,SAF3B;AAAA,QAGA,gBAAA,EAAkB,EAHlB;AAAA,QAIA,SAAA,EAAW,GAJX;AAAA,QAKA,IAAA,EAAM,EALN;AAAA,QAKU,IAAA,EAAM,EALhB;AAAA,QAKoB,IAAA,EAAM,EAL1B;AAAA,QAMA,SAAA,EAAW,SANX;AAAA,QAOA,UAAA,EAAY,EAPZ;AAAA,QAQA,UAAA,EAAY,EARZ;AAAA,QASA,mBAAA,EAAqB,EATrB;AAAA,QAUA,mBAAA,EAAqB,KAVrB;AAAA,QAWA,SAAA,EAAW,IAXX;AAAA,QAYA,MAAA,EAAQ,SAAA,GAAA;iBAAG,KAAH;QAAA,CAZR;AAAA,QAaA,OAAA,EAAS,EAbT;OAFJ,CAAA;AAAA,MAiBA,aAAA,GAAgB,CAAC,CAAC,MAAF,CAAS,IAAT,EAAe,EAAf,EAAmB,OAAO,CAAC,EAAE,CAAC,aAA9B,EAA6C,OAAQ,CAAA,MAAA,CAAO,CAAC,aAA7D,CAjBhB,CAAA;AAAA,MAkBA,cAAA,GACI;AAAA,QAAA,eAAA,EAAiB;AAAA,UAAC,eAAA,aAAD;SAAjB;AAAA,QACA,aAAA,EAAe,aADf;OAnBJ,CAAA;AAAA,MAsBA,YAAA,GAAe,IAAC,CAAA,IAAD,CAAM,gBAAN,CAtBf,CAAA;AAuBA,MAAA,IAAO,sBAAJ,IAAqB,SAAxB;AACI,QAAA,IAAA,GAAO,CAAC,CAAC,MAAF,CAAS,IAAT,EAAe,EAAf,EAAmB,cAAnB,EAAmC,CAAC,CAAC,MAAF,CAAS,EAAT,EAAa,QAAb,EAAuB,SAAvB,CAAnC,CAAP,CADJ;OAAA,MAAA;AAGI,QAAA,IAAA,GAAO,YAAP,CAHJ;OAvBA;AA4BA;AAGI,QAAA,UAAA,GAAa,EAAb,CAAA;AAAA,QACA,iBAAA,GAAoB,EADpB,CAAA;AAAA,QAEA,gBAAA,GAAmB,CAFnB,CAAA;AAAA,QAGA,SAAS,CAAC,aAAV,CAAwB,KAAxB,EAA+B,IAAI,CAAC,iBAApC,EAAuD,SAAC,MAAD,GAAA;AACnD,cAAA,sBAAA;AAAA,UAAA,IAAA,CAAA,IAAkB,CAAC,MAAL,CAAY,MAAZ,CAAd;AAAA,kBAAA,CAAA;WAAA;AAAA,UACA,iBAAiB,CAAC,IAAlB,CAAuB,MAAvB,CADA,CAAA;AAEA,eAAA,cAAA;sDAAA;AACI,YAAA,IAAO,wBAAP;AACI,cAAA,UAAW,CAAA,IAAA,CAAX,GAAmB,EAAnB,CAAA;AACA,cAAA,IAAG,gBAAA,GAAmB,CAAtB;AACI,gBAAA,UAAW,CAAA,IAAA,CAAM,CAAA,MAAA,CAAjB,GAA2B,gBAA3B,CADJ;eAFJ;aADJ;AAAA,WAFA;AAOA,eAAA,kBAAA,GAAA;AACI,YAAA,KAAA,wCAAuB,MAAvB,CAAA;;kBACiB,CAAA,KAAA,IAAU;aAD3B;AAAA,YAEA,UAAW,CAAA,IAAA,CAAM,CAAA,KAAA,CAAjB,EAFA,CADJ;AAAA,WAPA;iBAWA,gBAAA,GAZmD;QAAA,CAAvD,CAHA,CAAA;AAAA,QAkBA,OAAA,GAAU,CAAA,CAAE,SAAF,EAAa;AAAA,UAAA,OAAA,EAAS,OAAT;SAAb,CAA8B,CAAC,IAA/B,CAAoC,aAApC,EAAmD,CAAnD,CAlBV,CAAA;AAAA,QAqBA,eAAA,GAAkB,CAAA,CAAE,MAAF,CArBlB,CAAA;AAAA,QAuBA,QAAA,GAAW,CAAA,CAAE,UAAF,CACP,CAAC,QADM,CACG,aADH,CAEP,CAAC,QAFM,CAEG,eAFH,CAGP,CAAC,IAHM,CAGD,QAHC,EAGS,SAAA,GAAA;iBAAG,OAAA,CAAA,EAAH;QAAA,CAHT,CAvBX,CAAA;AA2BA;AAAA,aAAA,QAAA;8CAAA;AACI,UAAA,CAAA,CAAE,UAAF,CAAa,CAAC,GAAd,CAAkB,CAAlB,CAAoB,CAAC,IAArB,CAA0B,CAA1B,CAA4B,CAAC,QAA7B,CAAsC,QAAtC,CAAA,CADJ;AAAA,SA3BA;AAAA,QAgCA,MAAA,GAAS,CAAA,CAAE,MAAF,CAAS,CAAC,QAAV,CAAmB,4BAAnB,CAhCT,CAAA;AAAA,QAiCA,eAAA;;AAAmB;eAAA,eAAA,GAAA;gBAA2B,aAAS,IAAI,CAAC,gBAAd,EAAA,CAAA;AAA3B,2BAAA,EAAA;aAAA;AAAA;;YAjCnB,CAAA;AAAA,QAmCA,+BAAA,GAAkC,KAnClC,CAAA;AAoCA,QAAA,IAAG,IAAI,CAAC,mBAAL,KAA4B,MAA/B;AACI,UAAA,6BAAA,GAAgC,GAAhC,CADJ;SAAA,MAAA;AAGI,UAAA,6BAAA,GAAgC,QAAA,CAAS,IAAI,CAAC,mBAAd,CAAhC,CAHJ;SApCA;AAyCA,QAAA,IAAG,CAAA,KAAI,CAAM,6BAAN,CAAP;AACI,UAAA,UAAA,GAAa,CAAb,CAAA;AACA,eAAA,mDAAA;mCAAA;AAAA,YAAA,UAAA,IAAc,CAAC,CAAC,MAAhB,CAAA;AAAA,WADA;AAAA,UAEA,+BAAA,GAAkC,UAAA,GAAa,6BAF/C,CADJ;SAzCA;AA8CA,QAAA,IAAG,IAAI,CAAC,mBAAL,KAA4B,IAA5B,IAAoC,+BAAvC;AACI,UAAA,MAAM,CAAC,QAAP,CAAgB,aAAhB,CAAA,CADJ;SAAA,MAAA;AAGI,UAAA,MAAM,CAAC,QAAP,CAAgB,cAAhB,CAAA,CAHJ;SA9CA;AAmDA,aACO,SAAC,IAAD,GAAA;AACC,cAAA,4MAAA;AAAA,UAAA,MAAA;;AAAU;iBAAA,qBAAA,GAAA;AAAA,2BAAA,EAAA,CAAA;AAAA;;cAAV,CAAA;AAAA,UACA,eAAA,GAAkB,KADlB,CAAA;AAAA,UAEA,SAAA,GAAY,CAAA,CAAE,OAAF,CAAU,CAAC,QAAX,CAAoB,cAApB,CAAmC,CAAC,IAApC,CAAA,CAFZ,CAAA;AAAA,UAIA,SAAS,CAAC,MAAV,CAAiB,CAAA,CAAE,MAAF,CAAS,CAAC,MAAV,CACb,CAAA,CAAE,QAAF,CAAW,CAAC,IAAZ,CAAiB,IAAjB,CADa,EAEb,CAAA,CAAE,QAAF,CAAW,CAAC,QAAZ,CAAqB,OAArB,CAA6B,CAAC,IAA9B,CAAmC,GAAA,GAAI,MAAM,CAAC,MAAX,GAAkB,GAArD,CAFa,CAAjB,CAJA,CAAA;AAQA,UAAA,IAAG,MAAM,CAAC,MAAP,GAAgB,IAAI,CAAC,SAAxB;AACI,YAAA,SAAS,CAAC,MAAV,CAAiB,CAAA,CAAE,KAAF,CAAQ,CAAC,IAAT,CAAc,IAAI,CAAC,aAAa,CAAC,OAAjC,CAAjB,CAAA,CADJ;WAAA,MAAA;AAGI,YAAA,IAAG,MAAM,CAAC,MAAP,GAAgB,CAAnB;AACI,cAAA,QAAA,GAAW,CAAA,CAAE,KAAF,CAAQ,CAAC,QAAT,CAAkB,SAAlB,CAAX,CAAA;AAAA,cACA,MAAA,GAAS,OAAA,CAAQ,IAAI,CAAC,OAAb,EAAsB,IAAtB,CADT,CAAA;AAAA,cAEA,WAAA,GAAc,IAAI,CAAC,aAAa,CAAC,aAFjC,CAAA;AAAA,cAGA,CAAA,CAAE,SAAF,EAAa;AAAA,gBAAC,IAAA,EAAM,MAAP;eAAb,CAA4B,CAAC,QAA7B,CAAsC,QAAtC,CACI,CAAC,IADL,CACU;AAAA,gBAAC,WAAA,EAAa,WAAd;AAAA,gBAA2B,OAAA,EAAO,WAAlC;eADV,CAEI,CAAC,IAFL,CAEU,OAFV,EAEmB,SAAA,GAAA;AACX,oBAAA,0BAAA;AAAA,gBAAA,MAAA,GAAS,CAAA,CAAE,IAAF,CAAO,CAAC,GAAR,CAAA,CAAa,CAAC,WAAd,CAAA,CAA2B,CAAC,IAA5B,CAAA,CAAT,CAAA;AAAA,gBACA,UAAA,GAAa,SAAC,MAAD,EAAS,QAAT,GAAA;yBAAsB,SAAC,CAAD,GAAA;AAC/B,wBAAA,iBAAA;AAAA,oBAAA,WAAA,GAAc,MAAM,CAAC,SAAP,CAAiB,MAAM,CAAC,MAAxB,CAA+B,CAAC,IAAhC,CAAA,CAAd,CAAA;AACA,oBAAA,IAAe,WAAW,CAAC,MAAZ,KAAsB,CAArC;AAAA,6BAAO,IAAP,CAAA;qBADA;AAEA,kCAAO,IAAI,CAAC,IAAL,CAAU,MAAA,CAAO,CAAC,CAAC,WAAF,CAAA,CAAP,EAAwB,WAAxB,CAAV,CAAA,EAAA,aAAmD,QAAnD,EAAA,IAAA,MAAP,CAH+B;kBAAA,EAAtB;gBAAA,CADb,CAAA;AAAA,gBAKA,MAAA,GACY,MAAM,CAAC,UAAP,CAAkB,IAAlB,CAAR,GAAqC,UAAA,CAAW,IAAX,EAAiB,CAAC,CAAD,EAAG,CAAH,CAAjB,CAArC,GACQ,MAAM,CAAC,UAAP,CAAkB,IAAlB,CAAH,GAAgC,UAAA,CAAW,IAAX,EAAiB,CAAC,CAAA,CAAD,EAAI,CAAJ,CAAjB,CAAhC,GACG,MAAM,CAAC,UAAP,CAAkB,GAAlB,CAAH,GAAgC,UAAA,CAAW,GAAX,EAAiB,CAAC,CAAD,CAAjB,CAAhC,GACG,MAAM,CAAC,UAAP,CAAkB,GAAlB,CAAH,GAAgC,UAAA,CAAW,GAAX,EAAiB,CAAC,CAAA,CAAD,CAAjB,CAAhC,GACG,MAAM,CAAC,UAAP,CAAkB,GAAlB,CAAH,GAAgC,SAAC,CAAD,GAAA;AAC7B,kBAAA,IAAe,MAAM,CAAC,SAAP,CAAiB,CAAjB,CAAmB,CAAC,IAApB,CAAA,CAA0B,CAAC,MAA3B,KAAqC,CAApD;AAAA,2BAAO,IAAP,CAAA;mBAAA;yBACA,CAAC,CAAC,WAAF,CAAA,CAAe,CAAC,KAAhB,CAAsB,MAAM,CAAC,SAAP,CAAiB,CAAjB,CAAtB,EAF6B;gBAAA,CAAhC,GAGA,SAAC,CAAD,GAAA;yBAAO,CAAC,CAAC,WAAF,CAAA,CAAe,CAAC,OAAhB,CAAwB,MAAxB,CAAA,KAAmC,CAAA,EAA1C;gBAAA,CAbT,CAAA;uBAeA,SAAS,CAAC,IAAV,CAAe,uCAAf,CAAuD,CAAC,IAAxD,CAA6D,SAAA,GAAA;AACzD,kBAAA,IAAG,MAAA,CAAO,CAAA,CAAE,IAAF,CAAO,CAAC,IAAR,CAAA,CAAP,CAAH;2BACI,CAAA,CAAE,IAAF,CAAO,CAAC,MAAR,CAAA,CAAgB,CAAC,MAAjB,CAAA,CAAyB,CAAC,IAA1B,CAAA,EADJ;mBAAA,MAAA;2BAGI,CAAA,CAAE,IAAF,CAAO,CAAC,MAAR,CAAA,CAAgB,CAAC,MAAjB,CAAA,CAAyB,CAAC,IAA1B,CAAA,EAHJ;mBADyD;gBAAA,CAA7D,EAhBW;cAAA,CAFnB,CAHA,CAAA;AAAA,cA0BA,QAAQ,CAAC,MAAT,CAAgB,CAAA,CAAE,MAAF,CAAhB,CA1BA,CAAA;AAAA,cA2BA,CAAA,CAAE,UAAF,EAAc;AAAA,gBAAC,IAAA,EAAK,QAAN;eAAd,CAA8B,CAAC,QAA/B,CAAwC,QAAxC,CACI,CAAC,IADL,CACU,IAAI,CAAC,aAAa,CAAC,SAD7B,CAEI,CAAC,IAFL,CAEU,OAFV,EAEmB,SAAA,GAAA;AACX,gBAAA,SAAS,CAAC,IAAV,CAAe,6BAAf,CACI,CAAC,IADL,CACU,SADV,EACqB,IADrB,CAC0B,CAAC,WAD3B,CACuC,SADvC,CAAA,CAAA;AAEA,uBAAO,KAAP,CAHW;cAAA,CAFnB,CA3BA,CAAA;AAAA,cAiCA,CAAA,CAAE,UAAF,EAAc;AAAA,gBAAC,IAAA,EAAK,QAAN;eAAd,CAA8B,CAAC,QAA/B,CAAwC,QAAxC,CACI,CAAC,IADL,CACU,IAAI,CAAC,aAAa,CAAC,UAD7B,CAEI,CAAC,IAFL,CAEU,OAFV,EAEmB,SAAA,GAAA;AACX,gBAAA,SAAS,CAAC,IAAV,CAAe,uBAAf,CACI,CAAC,IADL,CACU,SADV,EACqB,KADrB,CAC2B,CAAC,WAD5B,CACwC,SADxC,CAAA,CAAA;AAEA,uBAAO,KAAP,CAHW;cAAA,CAFnB,CAjCA,CADJ;aAAA;AAAA,YAyCA,cAAA,GAAiB,CAAA,CAAE,OAAF,CAAU,CAAC,QAAX,CAAoB,mBAApB,CAAwC,CAAC,QAAzC,CAAkD,SAAlD,CAzCjB,CAAA;AA2CA;AAAA,iBAAA,wCAAA;8BAAA;AACK,cAAA,UAAA,GAAa,UAAW,CAAA,IAAA,CAAM,CAAA,KAAA,CAA9B,CAAA;AAAA,cACA,UAAA,GAAa,CAAA,CAAE,SAAF,CADb,CAAA;AAAA,cAEA,kBAAA,GAAqB,KAFrB,CAAA;AAGA,cAAA,IAAG,IAAI,CAAC,UAAW,CAAA,IAAA,CAAnB;AACG,gBAAA,kBAAA,GAAqB,CAAC,aAAa,IAAI,CAAC,UAAW,CAAA,IAAA,CAA7B,EAAA,KAAA,KAAD,CAArB,CADH;eAAA,MAEK,IAAG,IAAI,CAAC,UAAW,CAAA,IAAA,CAAnB;AACF,gBAAA,kBAAA,GAAqB,CAAC,aAAS,IAAI,CAAC,UAAW,CAAA,IAAA,CAAzB,EAAA,KAAA,MAAD,CAArB,CADE;eALL;AAAA,cAOA,oBAAA,kBAAoB,mBAPpB,CAAA;AAAA,cAQA,CAAA,CAAE,SAAF,CACG,CAAC,IADJ,CACS,MADT,EACiB,UADjB,CAC4B,CAAC,QAD7B,CACsC,WADtC,CAEG,CAAC,IAFJ,CAES,SAFT,EAEoB,CAAA,kBAFpB,CAEwC,CAAC,IAFzC,CAE8C,QAF9C,EAEwD,CAAC,IAAD,EAAM,KAAN,CAFxD,CAGG,CAAC,QAHJ,CAGa,UAHb,CAIG,CAAC,IAJJ,CAIS,QAJT,EAImB,SAAA,GAAA;uBAAG,CAAA,CAAE,IAAF,CAAO,CAAC,WAAR,CAAoB,SAApB,EAAH;cAAA,CAJnB,CARA,CAAA;AAAA,cAaA,UAAU,CAAC,MAAX,CAAkB,CAAA,CAAE,QAAF,CAAW,CAAC,QAAZ,CAAqB,OAArB,CAA6B,CAAC,IAA9B,CAAmC,KAAnC,CAAlB,CAbA,CAAA;AAAA,cAcA,UAAU,CAAC,MAAX,CAAkB,CAAA,CAAE,QAAF,CAAW,CAAC,QAAZ,CAAqB,OAArB,CAA6B,CAAC,IAA9B,CAAmC,GAAA,GAAI,UAAJ,GAAe,GAAlD,CAAlB,CAdA,CAAA;AAAA,cAeA,cAAc,CAAC,MAAf,CAAsB,CAAA,CAAE,KAAF,CAAQ,CAAC,MAAT,CAAgB,UAAhB,CAAtB,CAfA,CADL;AAAA,aA9CJ;WARA;AAAA,UAwEA,cAAA,GAAiB,SAAA,GAAA;AACb,YAAA,IAAG,SAAS,CAAC,IAAV,CAAe,mBAAf,CAAmC,CAAC,MAApC,GACI,SAAS,CAAC,IAAV,CAAe,2BAAf,CAA2C,CAAC,MADnD;AAEQ,cAAA,QAAQ,CAAC,QAAT,CAAkB,sBAAlB,CAAA,CAFR;aAAA,MAAA;AAIQ,cAAA,QAAQ,CAAC,WAAT,CAAqB,sBAArB,CAAA,CAJR;aAAA;AAAA,YAMI,SAAS,CAAC,IAAV,CAAe,YAAf,CAA4B,CAAC,GAA7B,CAAiC,EAAjC,CANJ,CAAA;AAAA,YAOI,SAAS,CAAC,IAAV,CAAe,sBAAf,CAAsC,CAAC,IAAvC,CAAA,CAPJ,CAAA;mBAQI,SAAS,CAAC,IAAV,CAAA,EATS;UAAA,CAxEjB,CAAA;AAAA,UAmFA,YAAA,GAAe,CAAA,CAAE,KAAF,CAAQ,CAAC,QAAT,CAAkB,SAAlB,CAnFf,CAAA;AAqFA,UAAA,IAAG,MAAM,CAAC,MAAP,IAAiB,IAAI,CAAC,SAAzB;AACI,YAAA,CAAA,CAAE,UAAF,EAAc;AAAA,cAAC,IAAA,EAAM,QAAP;aAAd,CAA+B,CAAC,IAAhC,CAAqC,IAAI,CAAC,aAAa,CAAC,KAAxD,CACI,CAAC,QADL,CACc,YADd,CAC2B,CAAC,IAD5B,CACiC,OADjC,EAC0C,SAAA,GAAA;AAClC,cAAA,IAAG,SAAS,CAAC,IAAV,CAAe,UAAf,CAA0B,CAAC,WAA3B,CAAuC,SAAvC,CAAiD,CAAC,MAArD;AACI,gBAAA,OAAA,CAAA,CAAA,CADJ;eAAA;qBAEA,cAAA,CAAA,EAHkC;YAAA,CAD1C,CAAA,CADJ;WArFA;AAAA,UA4FA,CAAA,CAAE,UAAF,EAAc;AAAA,YAAC,IAAA,EAAM,QAAP;WAAd,CAA+B,CAAC,IAAhC,CAAqC,IAAI,CAAC,aAAa,CAAC,MAAxD,CACI,CAAC,QADL,CACc,YADd,CAC2B,CAAC,IAD5B,CACiC,OADjC,EAC0C,SAAA,GAAA;AAClC,YAAA,SAAS,CAAC,IAAV,CAAe,kBAAf,CACI,CAAC,WADL,CACiB,SADjB,CAC2B,CAAC,IAD5B,CACiC,SADjC,EAC4C,KAD5C,CAAA,CAAA;AAAA,YAEA,SAAS,CAAC,IAAV,CAAe,wBAAf,CACI,CAAC,WADL,CACiB,SADjB,CAC2B,CAAC,IAD5B,CACiC,SADjC,EAC4C,IAD5C,CAFA,CAAA;mBAIA,cAAA,CAAA,EALkC;UAAA,CAD1C,CA5FA,CAAA;AAAA,UAoGA,YAAA,GAAe,CAAA,CAAE,QAAF,CAAW,CAAC,QAAZ,CAAqB,aAArB,CACX,CAAC,IADU,CACL,WADK,CACO,CAAC,IADR,CACa,OADb,EACsB,SAAC,CAAD,GAAA;AAC7B,gBAAA,eAAA;AAAA,YAAA,OAAc,CAAA,CAAE,CAAC,CAAC,aAAJ,CAAkB,CAAC,QAAnB,CAAA,CAAd,EAAC,YAAA,IAAD,EAAO,WAAA,GAAP,CAAA;mBACA,SAAS,CAAC,GAAV,CAAc;AAAA,cAAA,IAAA,EAAM,IAAA,GAAK,EAAX;AAAA,cAAe,GAAA,EAAK,GAAA,GAAI,EAAxB;aAAd,CAAyC,CAAC,IAA1C,CAAA,EAF6B;UAAA,CADtB,CApGf,CAAA;AAAA,UAyGA,QAAA,GAAW,CAAA,CAAE,MAAF,CAAS,CAAC,QAAV,CAAmB,OAAA,GAAQ,CAA3B,CACP,CAAC,MADM,CACC,CAAA,CAAE,QAAF,CAAW,CAAC,QAAZ,CAAqB,SAArB,CAA+B,CAAC,IAAhC,CAAqC,IAArC,CAA0C,CAAC,IAA3C,CAAgD,UAAhD,EAA4D,IAA5D,CAAiE,CAAC,MAAlE,CAAyE,YAAzE,CADD,CAzGX,CAAA;AA4GA,UAAA,IAA6C,eAA7C;AAAA,YAAA,QAAQ,CAAC,QAAT,CAAkB,sBAAlB,CAAA,CAAA;WA5GA;iBA6GA,MAAM,CAAC,MAAP,CAAc,QAAd,CAAuB,CAAC,MAAxB,CAA+B,SAA/B,EA9GD;QAAA,CADP;AAAA,aAAA,oBAAA;;oCAAA;AACI,aAAI,KAAJ,CADJ;AAAA,SAnDA;AAAA,QAoKA,GAAA,GAAM,CAAA,CAAE,MAAF,CAAS,CAAC,QAAV,CAAmB,OAAnB,CApKN,CAAA;AAAA,QAwKA,UAAA,GAAa,CAAA,CAAE,UAAF,CAAa,CAAC,QAAd,CAAuB,eAAvB,CACT,CAAC,IADQ,CACH,QADG,EACO,SAAA,GAAA;iBAAG,OAAA,CAAA,EAAH;QAAA,CADP,CAxKb,CAAA;AA0KA;AAAA,aAAA,SAAA;+CAAA;AACI,UAAA,UAAU,CAAC,MAAX,CAAkB,CAAA,CAAE,UAAF,CAAa,CAAC,GAAd,CAAkB,CAAlB,CAAoB,CAAC,IAArB,CAA0B,CAA1B,CAAlB,CAAA,CADJ;AAAA,SA1KA;AAAA,QA6KA,CAAA,CAAE,MAAF,CAAS,CAAC,QAAV,CAAmB,SAAnB,CACE,CAAC,QADH,CACY,GADZ,CAEE,CAAC,MAFH,CAEU,UAFV,CAGE,CAAC,MAHH,CAGU,CAAA,CAAE,MAAF,CAHV,CA7KA,CAAA;AAAA,QAmLA,CAAA,CAAE,MAAF,CAAS,CAAC,QAAV,CAAmB,uCAAnB,CAA2D,CAAC,QAA5D,CAAqE,GAArE,CAnLA,CAAA;AAAA,QAqLA,GAAA,GAAM,CAAA,CAAE,MAAF,CAAS,CAAC,QAAV,CAAmB,OAAnB,CArLN,CAAA;AAAA,QAwLA,GAAG,CAAC,MAAJ,CAAW,CAAA,CAAE,MAAF,CAAS,CAAC,QAAV,CAAmB,0BAAnB,CAA8C,CAAC,IAA/C,CAAoD,QAApD,EAA8D,KAA9D,CAAX,CAxLA,CAAA;AAAA,QA2LA,UAAA,GAAa,CAAA,CAAE,MAAF,CACT,CAAC,IADQ,CACH,QADG,EACO,KADP,CAET,CAAC,QAFQ,CAEC,iBAFD,CAGT,CAAC,QAHQ,CAGC,GAHD,CA3Lb,CAAA;AAiMA,QAAA,IAAG,IAAI,CAAC,mBAAL,KAA4B,IAA5B,IAAoC,+BAAvC;AACI,UAAA,OAAO,CAAC,IAAR,CAAa,iBAAb,CAA+B,CAAC,OAAhC,CAAwC,eAAxC,CAAA,CAAA;AAAA,UACA,OAAO,CAAC,IAAR,CAAa,iBAAb,CAA+B,CAAC,OAAhC,CAAwC,MAAxC,CADA,CADJ;SAAA,MAAA;AAII,UAAA,OAAO,CAAC,OAAR,CAAgB,CAAA,CAAE,MAAF,CAAS,CAAC,MAAV,CAAiB,eAAjB,CAAiC,CAAC,MAAlC,CAAyC,MAAzC,CAAhB,CAAA,CAJJ;SAjMA;AAAA,QAwMA,IAAC,CAAA,IAAD,CAAM,OAAN,CAxMA,CAAA;AA4MA;AAAA,aAAA,wCAAA;sBAAA;AACI,UAAA,IAAC,CAAA,IAAD,CAAM,UAAN,CAAiB,CAAC,MAAlB,CAAyB,IAAC,CAAA,IAAD,CAAM,QAAA,GAAQ,CAAC,CAAC,CAAC,OAAF,CAAU,CAAV,EAAa,eAAb,CAAD,CAAd,CAAzB,CAAA,CADJ;AAAA,SA5MA;AA8MA;AAAA,aAAA,wCAAA;sBAAA;AACI,UAAA,IAAC,CAAA,IAAD,CAAM,UAAN,CAAiB,CAAC,MAAlB,CAAyB,IAAC,CAAA,IAAD,CAAM,QAAA,GAAQ,CAAC,CAAC,CAAC,OAAF,CAAU,CAAV,EAAa,eAAb,CAAD,CAAd,CAAzB,CAAA,CADJ;AAAA,SA9MA;AAgNA,QAAA,IAAG,2BAAH;AACI,UAAA,IAAC,CAAA,IAAD,CAAM,gBAAN,CAAuB,CAAC,GAAxB,CAA4B,IAAI,CAAC,cAAjC,CAAA,CADJ;SAhNA;AAkNA,QAAA,IAAG,yBAAH;AACI,UAAA,IAAC,CAAA,IAAD,CAAM,cAAN,CAAqB,CAAC,GAAtB,CAA0B,IAAI,CAAC,YAA/B,CAAA,CADJ;SAlNA;AAAA,QAqNA,aAAA,GAAgB,IArNhB,CAAA;AAAA,QAwNA,cAAA,GAAiB,CAAA,SAAA,KAAA,GAAA;iBAAA,SAAA,GAAA;AACb,gBAAA,6IAAA;AAAA,YAAA,OAAA,GACI;AAAA,cAAA,iBAAA,EAAmB,IAAI,CAAC,iBAAxB;AAAA,cACA,aAAA,EAAe,IAAI,CAAC,aADpB;AAAA,cAEA,eAAA,EAAiB,IAAI,CAAC,eAFtB;AAAA,cAGA,OAAA,EAAS,IAAI,CAAC,OAHd;AAAA,cAIA,IAAA,EAAM,EAJN;AAAA,cAIU,IAAA,EAAM,EAJhB;AAAA,cAKA,SAAA,EAAW,IAAI,CAAC,SALhB;aADJ,CAAA;AAAA,YAQA,kBAAA,gFAA0E,CAR1E,CAAA;AAAA,YASA,IAAA,GAAO,EATP,CAAA;AAAA,YAUA,KAAC,CAAA,IAAD,CAAM,0BAAN,CAAiC,CAAC,IAAlC,CAAuC,SAAA,GAAA;qBAAG,OAAO,CAAC,IAAI,CAAC,IAAb,CAAkB,CAAA,CAAE,IAAF,CAAO,CAAC,IAAR,CAAa,UAAb,CAAlB,EAAH;YAAA,CAAvC,CAVA,CAAA;AAAA,YAWA,KAAC,CAAA,IAAD,CAAM,0BAAN,CAAiC,CAAC,IAAlC,CAAuC,SAAA,GAAA;qBAAG,OAAO,CAAC,IAAI,CAAC,IAAb,CAAkB,CAAA,CAAE,IAAF,CAAO,CAAC,IAAR,CAAa,UAAb,CAAlB,EAAH;YAAA,CAAvC,CAXA,CAAA;AAAA,YAYA,KAAC,CAAA,IAAD,CAAM,iCAAN,CAAwC,CAAC,IAAzC,CAA8C,SAAA,GAAA;AAC1C,cAAA,IAAG,kBAAA,KAAsB,CAAzB;uBACI,CAAA,CAAE,IAAF,CAAO,CAAC,MAAR,CAAA,EADJ;eAAA,MAAA;AAGI,gBAAA,kBAAA,EAAA,CAAA;AACA,gBAAA,IAA2B,CAAA,CAAE,IAAF,CAAO,CAAC,GAAR,CAAA,CAAA,KAAiB,EAA5C;yBAAA,IAAI,CAAC,IAAL,CAAU,CAAA,CAAE,IAAF,CAAO,CAAC,GAAR,CAAA,CAAV,EAAA;iBAJJ;eAD0C;YAAA,CAA9C,CAZA,CAAA;AAmBA,YAAA,IAAG,kBAAA,KAAsB,CAAzB;AACI,cAAA,OAAA,GAAU,KAAC,CAAA,IAAD,CAAM,UAAN,CAAV,CAAA;AACA,mBAAS,gGAAT,GAAA;AACI,gBAAA,WAAA,GAAc,CAAA,CAAE,UAAF,CACV,CAAC,QADS,CACA,iBADA,CAEV,CAAC,MAFS,CAEF,CAAA,CAAE,UAAF,CAFE,CAGV,CAAC,IAHS,CAGJ,QAHI,EAGM,SAAA,GAAA;yBAAG,OAAA,CAAA,EAAH;gBAAA,CAHN,CAAd,CAAA;AAIA,qBAAA,mDAAA;4CAAA;AACI,kBAAA,WAAW,CAAC,MAAZ,CAAmB,CAAA,CAAE,UAAF,CAAa,CAAC,GAAd,CAAkB,IAAlB,CAAuB,CAAC,IAAxB,CAA6B,IAA7B,CAAnB,CAAA,CADJ;AAAA,iBAJA;AAAA,gBAMA,OAAO,CAAC,MAAR,CAAe,WAAf,CANA,CADJ;AAAA,eAFJ;aAnBA;AA8BA,YAAA,IAAG,aAAH;AACI,cAAA,IAAA,GAAO,IAAI,CAAC,IAAZ,CAAA;AAAA,cACA,CAAA,GAAI,CADJ,CAAA;AAAA,cAEA,KAAC,CAAA,IAAD,CAAM,iCAAN,CAAwC,CAAC,IAAzC,CAA8C,SAAA,GAAA;AAC1C,gBAAA,CAAA,CAAE,IAAF,CAAO,CAAC,GAAR,CAAY,IAAK,CAAA,CAAA,CAAjB,CAAA,CAAA;uBACA,CAAA,GAF0C;cAAA,CAA9C,CAFA,CAAA;AAAA,cAKA,aAAA,GAAgB,KALhB,CADJ;aA9BA;AAAA,YAsCA,OAAO,CAAC,cAAR,GAAyB,UAAU,CAAC,GAAX,CAAA,CAtCzB,CAAA;AAAA,YAuCA,OAAO,CAAC,IAAR,GAAe,IAvCf,CAAA;AAAA,YAwCA,OAAO,CAAC,UAAR,GAAqB,IAAI,CAAC,WAAY,CAAA,UAAU,CAAC,GAAX,CAAA,CAAA,CAAjB,CAAmC,IAAnC,CAxCrB,CAAA;AAAA,YAyCA,OAAO,CAAC,QAAR,GAAmB,IAAI,CAAC,SAAU,CAAA,QAAQ,CAAC,GAAT,CAAA,CAAA,CAzClC,CAAA;AAAA,YA4CA,UAAA,GAAa,EA5Cb,CAAA;AAAA,YA6CA,KAAC,CAAA,IAAD,CAAM,iBAAN,CAAwB,CAAC,GAAzB,CAA6B,UAA7B,CAAwC,CAAC,IAAzC,CAA8C,SAAA,GAAA;AAC1C,kBAAA,MAAA;AAAA,cAAA,MAAA,GAAS,CAAA,CAAE,IAAF,CAAO,CAAC,IAAR,CAAa,QAAb,CAAT,CAAA;AACA,cAAA,IAAG,6BAAH;uBACI,UAAW,CAAA,MAAO,CAAA,CAAA,CAAP,CAAU,CAAC,IAAtB,CAA4B,MAAO,CAAA,CAAA,CAAnC,EADJ;eAAA,MAAA;uBAGI,UAAW,CAAA,MAAO,CAAA,CAAA,CAAP,CAAX,GAAwB,CAAE,MAAO,CAAA,CAAA,CAAT,EAH5B;eAF0C;YAAA,CAA9C,CA7CA,CAAA;AAAA,YAoDA,UAAA,GAAa,EApDb,CAAA;AAAA,YAqDA,KAAC,CAAA,IAAD,CAAM,yBAAN,CAAgC,CAAC,IAAjC,CAAsC,SAAA,GAAA;AAClC,kBAAA,MAAA;AAAA,cAAA,MAAA,GAAS,CAAA,CAAE,IAAF,CAAO,CAAC,IAAR,CAAa,QAAb,CAAT,CAAA;AACA,cAAA,IAAG,6BAAH;AACI,gBAAA,IAAG,6BAAH;yBACI,UAAW,CAAA,MAAO,CAAA,CAAA,CAAP,CAAU,CAAC,IAAtB,CAA4B,MAAO,CAAA,CAAA,CAAnC,EADJ;iBAAA,MAAA;yBAGI,UAAW,CAAA,MAAO,CAAA,CAAA,CAAP,CAAX,GAAwB,CAAE,MAAO,CAAA,CAAA,CAAT,EAH5B;iBADJ;eAFkC;YAAA,CAAtC,CArDA,CAAA;AAAA,YA6DA,OAAO,CAAC,MAAR,GAAiB,SAAC,MAAD,GAAA;AACb,kBAAA,4BAAA;AAAA,cAAA,IAAgB,CAAA,IAAQ,CAAC,MAAL,CAAY,MAAZ,CAApB;AAAA,uBAAO,KAAP,CAAA;eAAA;AACA,mBAAA,eAAA;8CAAA;AACI,gBAAA,WAAgB,EAAA,GAAG,qCAAa,MAAb,CAAH,EAAA,aAA2B,aAA3B,EAAA,IAAA,MAAhB;AAAA,yBAAO,KAAP,CAAA;iBADJ;AAAA,eADA;AAGA,qBAAO,IAAP,CAJa;YAAA,CA7DjB,CAAA;AAAA,YAmEA,UAAU,CAAC,KAAX,CAAiB,iBAAjB,EAAmC,OAAnC,CAnEA,CAAA;AAAA,YAoEA,cAAA,GAAiB,CAAC,CAAC,MAAF,CAAS,EAAT,EAAa,IAAb,EACb;AAAA,cAAA,IAAA,EAAM,OAAO,CAAC,IAAd;AAAA,cACA,IAAA,EAAM,OAAO,CAAC,IADd;AAAA,cAEA,IAAA,EAAM,IAFN;AAAA,cAGA,UAAA,EAAY,UAHZ;AAAA,cAIA,UAAA,EAAY,UAJZ;AAAA,cAKA,cAAA,EAAgB,UALhB;AAAA,cAMA,cAAA,EAAgB,UAAU,CAAC,GAAX,CAAA,CANhB;AAAA,cAOA,YAAA,EAAc,QAAQ,CAAC,GAAT,CAAA,CAPd;aADa,CApEjB,CAAA;AAAA,YA8EA,KAAC,CAAA,IAAD,CAAM,gBAAN,EAAwB,cAAxB,CA9EA,CAAA;AAiFA,YAAA,IAAG,IAAI,CAAC,mBAAR;AACI,cAAA,oBAAA,GAAuB,KAAC,CAAA,IAAD,CAAM,+BAAN,CAAvB,CAAA;AAAA,cACA,CAAA,CAAE,oBAAF,CAAuB,CAAC,QAAxB,CAAiC,IAAjC,CACI,CAAC,IADL,CACU,SAAC,CAAD,EAAI,CAAJ,GAAA;uBAAU,WAAA,CAAY,CAAA,CAAE,CAAF,CAAI,CAAC,IAAL,CAAA,CAAZ,EAAyB,CAAA,CAAE,CAAF,CAAI,CAAC,IAAL,CAAA,CAAzB,EAAV;cAAA,CADV,CAEI,CAAC,QAFL,CAEc,oBAFd,CADA,CADJ;aAjFA;AAAA,YAuFA,UAAU,CAAC,GAAX,CAAe,SAAf,EAA0B,CAA1B,CAvFA,CAAA;AAwFA,YAAA,IAAkC,sBAAlC;qBAAA,IAAI,CAAC,SAAL,CAAe,cAAf,EAAA;aAzFa;UAAA,EAAA;QAAA,CAAA,CAAA,CAAA,IAAA,CAxNjB,CAAA;AAAA,QAmTA,OAAA,GAAU,CAAA,SAAA,KAAA,GAAA;iBAAA,SAAA,GAAA;AACN,YAAA,UAAU,CAAC,GAAX,CAAe,SAAf,EAA0B,GAA1B,CAAA,CAAA;mBACA,UAAA,CAAW,cAAX,EAA2B,EAA3B,EAFM;UAAA,EAAA;QAAA,CAAA,CAAA,CAAA,IAAA,CAnTV,CAAA;AAAA,QAwTA,OAAA,CAAA,CAxTA,CAAA;AAAA,QA0TA,IAAC,CAAA,IAAD,CAAM,mBAAN,CAA0B,CAAC,QAA3B,CACQ;AAAA,UAAA,MAAA,EAAQ,SAAC,CAAD,EAAI,EAAJ,GAAA;AAAW,YAAA,IAAiB,iBAAjB;qBAAA,OAAA,CAAA,EAAA;aAAX;UAAA,CAAR;AAAA,UACA,WAAA,EAAa,IAAC,CAAA,IAAD,CAAM,mBAAN,CADb;AAAA,UAEA,KAAA,EAAO,IAFP;AAAA,UAGA,WAAA,EAAa,gBAHb;SADR,CA1TA,CAHJ;OAAA,cAAA;AAmUI,QADE,UACF,CAAA;AAAA,QAAA,IAA0B,kDAA1B;AAAA,UAAA,OAAO,CAAC,KAAR,CAAc,CAAC,CAAC,KAAhB,CAAA,CAAA;SAAA;AAAA,QACA,IAAC,CAAA,IAAD,CAAM,IAAI,CAAC,aAAa,CAAC,aAAzB,CADA,CAnUJ;OA5BA;AAiWA,aAAO,IAAP,CAlWW;IAAA,CAtkBf,CAAA;AA06BA;AAAA;;OA16BA;AAAA,IA86BA,CAAC,CAAC,EAAE,CAAC,OAAL,GAAe,SAAC,KAAD,EAAoB,IAApB,GAAA;AACX,UAAA,8EAAA;;QADY,QAAQ;OACpB;AAAA,MAAA,OAAA,GAAU,IAAC,CAAA,IAAD,CAAM,SAAN,CAAV,CAAA;AAAA,MACA,OAAA,GAAU,IAAC,CAAA,IAAD,CAAM,SAAN,CADV,CAAA;AAAA,MAKA,mBAAA,oDAAmC,CAAE,qCALrC,CAAA;;QAMA,sBAAuB,SAAC,MAAD,GAAA;AACnB,cAAA,QAAA;AAAA,UAAA,GAAA,GAAM,IAAI,CAAC,GAAL,aAAS,MAAT,CAAN,CAAA;AAAA,UACA,GAAA,GAAM,IAAI,CAAC,GAAL,aAAS,MAAT,CADN,CAAA;AAEA,iBAAO,SAAC,CAAD,GAAA;AACH,gBAAA,MAAA;AAAA,YAAA,MAAA,GAAS,GAAA,GAAM,IAAI,CAAC,KAAL,CAAW,GAAA,GAAI,CAAC,CAAA,GAAE,GAAH,CAAJ,GAAY,CAAC,GAAA,GAAI,GAAL,CAAvB,CAAf,CAAA;AACA,mBAAO,UAAA,GAAW,MAAX,GAAkB,GAAlB,GAAqB,MAArB,GAA4B,GAAnC,CAFG;UAAA,CAAP,CAHmB;QAAA;OANvB;AAAA,MAaA,UAAA,GAAa,CAAA,SAAA,KAAA,GAAA;eAAA,SAAC,KAAD,GAAA;AACT,cAAA,+BAAA;AAAA,UAAA,WAAA,GAAc,SAAC,CAAD,GAAA;mBACV,KAAC,CAAA,IAAD,CAAM,KAAN,CAAY,CAAC,IAAb,CAAkB,SAAA,GAAA;AACd,kBAAA,CAAA;AAAA,cAAA,CAAA,GAAI,CAAA,CAAE,IAAF,CAAO,CAAC,IAAR,CAAa,OAAb,CAAJ,CAAA;AACA,cAAA,IAAiB,WAAA,IAAO,QAAA,CAAS,CAAT,CAAxB;uBAAA,CAAA,CAAE,CAAF,EAAK,CAAA,CAAE,IAAF,CAAL,EAAA;eAFc;YAAA,CAAlB,EADU;UAAA,CAAd,CAAA;AAAA,UAKA,MAAA,GAAS,EALT,CAAA;AAAA,UAMA,WAAA,CAAY,SAAC,CAAD,GAAA;mBAAO,MAAM,CAAC,IAAP,CAAY,CAAZ,EAAP;UAAA,CAAZ,CANA,CAAA;AAAA,UAOA,UAAA,GAAa,mBAAA,CAAoB,MAApB,CAPb,CAAA;iBAQA,WAAA,CAAY,SAAC,CAAD,EAAI,IAAJ,GAAA;mBAAa,IAAI,CAAC,GAAL,CAAS,kBAAT,EAA6B,UAAA,CAAW,CAAX,CAA7B,EAAb;UAAA,CAAZ,EATS;QAAA,EAAA;MAAA,CAAA,CAAA,CAAA,IAAA,CAbb,CAAA;AAwBA,cAAO,KAAP;AAAA,aACS,SADT;AAC2B,UAAA,UAAA,CAAW,SAAX,CAAA,CAD3B;AACS;AADT,aAES,YAFT;AAE2B,eAAsC,qFAAtC,GAAA;AAAA,YAAA,UAAA,CAAW,aAAA,GAAc,CAAzB,CAAA,CAAA;AAAA,WAF3B;AAES;AAFT,aAGS,YAHT;AAG2B,eAAsC,qFAAtC,GAAA;AAAA,YAAA,UAAA,CAAW,aAAA,GAAc,CAAzB,CAAA,CAAA;AAAA,WAH3B;AAAA,OAxBA;AAAA,MA6BA,UAAA,CAAW,oBAAX,CA7BA,CAAA;AAAA,MA8BA,UAAA,CAAW,oBAAX,CA9BA,CAAA;AAgCA,aAAO,IAAP,CAjCW;IAAA,CA96Bf,CAAA;AAi9BA;AAAA;;OAj9BA;WAq9BA,CAAC,CAAC,EAAE,CAAC,QAAL,GAAiB,SAAA,GAAA;AACb,UAAA,uCAAA;AAAA,MAAA,OAAA,GAAU,IAAC,CAAA,IAAD,CAAM,SAAN,CAAV,CAAA;AAAA,MACA,OAAA,GAAU,IAAC,CAAA,IAAD,CAAM,SAAN,CADV,CAAA;AAAA,MAGA,UAAA,GAAa,CAAA,SAAA,KAAA,GAAA;eAAA,SAAC,KAAD,GAAA;AACT,cAAA,gCAAA;AAAA,UAAA,WAAA,GAAc,SAAC,CAAD,GAAA;mBACV,KAAC,CAAA,IAAD,CAAM,KAAN,CAAY,CAAC,IAAb,CAAkB,SAAA,GAAA;AACd,kBAAA,CAAA;AAAA,cAAA,CAAA,GAAI,CAAA,CAAE,IAAF,CAAO,CAAC,IAAR,CAAa,OAAb,CAAJ,CAAA;AACA,cAAA,IAAiB,WAAA,IAAO,QAAA,CAAS,CAAT,CAAxB;uBAAA,CAAA,CAAE,CAAF,EAAK,CAAA,CAAE,IAAF,CAAL,EAAA;eAFc;YAAA,CAAlB,EADU;UAAA,CAAd,CAAA;AAAA,UAKA,MAAA,GAAS,EALT,CAAA;AAAA,UAMA,WAAA,CAAY,SAAC,CAAD,GAAA;mBAAO,MAAM,CAAC,IAAP,CAAY,CAAZ,EAAP;UAAA,CAAZ,CANA,CAAA;AAAA,UAOA,GAAA,GAAM,IAAI,CAAC,GAAL,aAAS,MAAT,CAPN,CAAA;AAAA,UAQA,MAAA,GAAS,SAAC,CAAD,GAAA;mBAAO,GAAA,GAAI,CAAJ,GAAM,CAAC,GAAA,GAAI,GAAL,EAAb;UAAA,CART,CAAA;iBASA,WAAA,CAAY,SAAC,CAAD,EAAI,IAAJ,GAAA;AACR,gBAAA,aAAA;AAAA,YAAA,IAAA,GAAO,IAAI,CAAC,IAAL,CAAA,CAAP,CAAA;AAAA,YACA,OAAA,GAAU,CAAA,CAAE,OAAF,CAAU,CAAC,GAAX,CACN;AAAA,cAAA,UAAA,EAAY,UAAZ;AAAA,cACA,QAAA,EAAU,MADV;aADM,CADV,CAAA;AAAA,YAIA,OAAO,CAAC,MAAR,CAAe,CAAA,CAAE,OAAF,CAAU,CAAC,GAAX,CACX;AAAA,cAAA,UAAA,EAAY,UAAZ;AAAA,cACA,QAAA,EAAU,CADV;AAAA,cAEA,MAAA,EAAQ,CAFR;AAAA,cAGA,OAAA,EAAS,CAHT;AAAA,cAIA,QAAA,EAAU,MAAA,CAAO,CAAP,CAAA,GAAY,GAJtB;AAAA,cAKA,kBAAA,EAAoB,MALpB;aADW,CAAf,CAJA,CAAA;AAAA,YAWA,OAAO,CAAC,MAAR,CAAe,CAAA,CAAE,OAAF,CAAU,CAAC,IAAX,CAAgB,IAAhB,CAAqB,CAAC,GAAtB,CACX;AAAA,cAAA,UAAA,EAAW,UAAX;AAAA,cACA,cAAA,EAAe,KADf;AAAA,cAEA,eAAA,EAAgB,KAFhB;aADW,CAAf,CAXA,CAAA;mBAgBA,IAAI,CAAC,GAAL,CAAS;AAAA,cAAA,SAAA,EAAW,CAAX;AAAA,cAAa,aAAA,EAAe,KAA5B;AAAA,cAAmC,YAAA,EAAc,QAAjD;aAAT,CAAmE,CAAC,IAApE,CAAyE,OAAzE,EAjBQ;UAAA,CAAZ,EAVS;QAAA,EAAA;MAAA,CAAA,CAAA,CAAA,IAAA,CAHb,CAAA;AAgCA,WAAsC,gFAAtC,GAAA;AAAA,QAAA,UAAA,CAAW,aAAA,GAAc,CAAzB,CAAA,CAAA;AAAA,OAhCA;AAAA,MAiCA,UAAA,CAAW,oBAAX,CAjCA,CAAA;AAmCA,aAAO,IAAP,CApCa;IAAA,EAv9BN;EAAA,CAAf,CATA,CAAA;AAAA","file":"pivot.js","sourceRoot":"/source/","sourcesContent":["callWithJQuery = (pivotModule) ->\n    if typeof exports is \"object\" and typeof module is \"object\" # CommonJS\n        pivotModule require(\"jquery\")\n    else if typeof define is \"function\" and define.amd # AMD\n        define [\"jquery\"], pivotModule\n    # Plain browser env\n    else\n        pivotModule jQuery\n\ncallWithJQuery ($) ->\n\n    ###\n    Utilities\n    ###\n\n    addSeparators = (nStr, thousandsSep, decimalSep) ->\n        nStr += ''\n        x = nStr.split('.')\n        x1 = x[0]\n        x2 = if x.length > 1 then  decimalSep + x[1] else ''\n        rgx = /(\\d+)(\\d{3})/\n        x1 = x1.replace(rgx, '$1' + thousandsSep + '$2') while rgx.test(x1)\n        return x1 + x2\n\n    numberFormat = (opts) ->\n        defaults =\n            digitsAfterDecimal: 2, scaler: 1,\n            thousandsSep: \",\", decimalSep: \".\"\n            prefix: \"\", suffix: \"\"\n            showZero: false\n        opts = $.extend({}, defaults, opts)\n        (x) ->\n            return \"\" if isNaN(x) or not isFinite(x)\n            return \"\" if x == 0 and not opts.showZero\n            result = addSeparators (opts.scaler*x).toFixed(opts.digitsAfterDecimal), opts.thousandsSep, opts.decimalSep\n            return \"\"+opts.prefix+result+opts.suffix\n\n    #aggregator templates default to US number formatting but this is overrideable\n    usFmt = numberFormat()\n    usFmtInt = numberFormat(digitsAfterDecimal: 0)\n    usFmtPct = numberFormat(digitsAfterDecimal:1, scaler: 100, suffix: \"%\")\n\n    aggregatorTemplates =\n        count: (formatter=usFmtInt) -> () -> (data, rowKey, colKey) ->\n            count: 0\n            push:  -> @count++\n            value: -> @count\n            format: formatter\n\n        countUnique: (formatter=usFmtInt) -> ([attr]) -> (data, rowKey, colKey) ->\n            uniq: []\n            push: (record) -> @uniq.push(record[attr]) if record[attr] not in @uniq\n            value: -> @uniq.length\n            format: formatter\n            numInputs: if attr? then 0 else 1\n\n        listUnique: (sep) -> ([attr]) -> (data, rowKey, colKey)  ->\n            uniq: []\n            push: (record) -> @uniq.push(record[attr]) if record[attr] not in @uniq\n            value: -> @uniq.join sep\n            format: (x) -> x\n            numInputs: if attr? then 0 else 1\n\n        sum: (formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\n            sum: 0\n            push: (record) -> @sum += parseFloat(record[attr]) if not isNaN parseFloat(record[attr])\n            value: -> @sum\n            format: formatter\n            numInputs: if attr? then 0 else 1\n\n        min: (formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\n            val: null\n            sorter: getSort(data?.sorters, attr)\n            push: (record) ->\n                x = record[attr]\n                @val = x if @sorter(x, @val ? x) <= 0\n            value: -> @val\n            format: (x) -> if isNaN(x) then x else formatter(x)\n            numInputs: if attr? then 0 else 1\n\n        max: (formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\n            val: null\n            sorter: getSort(data?.sorters, attr)\n            push: (record) ->\n                x = record[attr]\n                @val = x if @sorter(x, @val ? x) >= 0\n            value: -> @val\n            format: (x) -> if isNaN(x) then x else formatter(x)\n            numInputs: if attr? then 0 else 1\n\n        average:  (formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\n            sum: 0\n            len: 0\n            push: (record) ->\n                if not isNaN parseFloat(record[attr])\n                    @sum += parseFloat(record[attr])\n                    @len++\n            value: -> @sum/@len\n            format: formatter\n            numInputs: if attr? then 0 else 1\n\n        sumOverSum: (formatter=usFmt) -> ([num, denom]) -> (data, rowKey, colKey) ->\n            sumNum: 0\n            sumDenom: 0\n            push: (record) ->\n                @sumNum   += parseFloat(record[num])   if not isNaN parseFloat(record[num])\n                @sumDenom += parseFloat(record[denom]) if not isNaN parseFloat(record[denom])\n            value: -> @sumNum/@sumDenom\n            format: formatter\n            numInputs: if num? and denom? then 0 else 2\n\n        sumOverSumBound80: (upper=true, formatter=usFmt) -> ([num, denom]) -> (data, rowKey, colKey) ->\n            sumNum: 0\n            sumDenom: 0\n            push: (record) ->\n                @sumNum   += parseFloat(record[num])   if not isNaN parseFloat(record[num])\n                @sumDenom += parseFloat(record[denom]) if not isNaN parseFloat(record[denom])\n            value: ->\n                sign = if upper then 1 else -1\n                (0.821187207574908/@sumDenom + @sumNum/@sumDenom + 1.2815515655446004*sign*\n                    Math.sqrt(0.410593603787454/ (@sumDenom*@sumDenom) + (@sumNum*(1 - @sumNum/ @sumDenom))/ (@sumDenom*@sumDenom)))/\n                    (1 + 1.642374415149816/@sumDenom)\n            format: formatter\n            numInputs: if num? and denom? then 0 else 2\n\n        fractionOf: (wrapped, type=\"total\", formatter=usFmtPct) -> (x...) -> (data, rowKey, colKey) ->\n            selector: {total:[[],[]],row:[rowKey,[]],col:[[],colKey]}[type]\n            inner: wrapped(x...)(data, rowKey, colKey)\n            push: (record) -> @inner.push record\n            format: formatter\n            value: -> @inner.value() / data.getAggregator(@selector...).inner.value()\n            numInputs: wrapped(x...)().numInputs\n\n    #default aggregators & renderers use US naming and number formatting\n    aggregators = do (tpl = aggregatorTemplates) ->\n        \"Count\":                tpl.count(usFmtInt)\n        \"Count Unique Values\":  tpl.countUnique(usFmtInt)\n        \"List Unique Values\":   tpl.listUnique(\", \")\n        \"Sum\":                  tpl.sum(usFmt)\n        \"Integer Sum\":          tpl.sum(usFmtInt)\n        \"Average\":              tpl.average(usFmt)\n        \"Minimum\":              tpl.min(usFmt)\n        \"Maximum\":              tpl.max(usFmt)\n        \"Sum over Sum\":         tpl.sumOverSum(usFmt)\n        \"80% Upper Bound\":      tpl.sumOverSumBound80(true, usFmt)\n        \"80% Lower Bound\":      tpl.sumOverSumBound80(false, usFmt)\n        \"Sum as Fraction of Total\":     tpl.fractionOf(tpl.sum(),   \"total\", usFmtPct)\n        \"Sum as Fraction of Rows\":      tpl.fractionOf(tpl.sum(),   \"row\",   usFmtPct)\n        \"Sum as Fraction of Columns\":   tpl.fractionOf(tpl.sum(),   \"col\",   usFmtPct)\n        \"Count as Fraction of Total\":   tpl.fractionOf(tpl.count(), \"total\", usFmtPct)\n        \"Count as Fraction of Rows\":    tpl.fractionOf(tpl.count(), \"row\",   usFmtPct)\n        \"Count as Fraction of Columns\": tpl.fractionOf(tpl.count(), \"col\",   usFmtPct)\n\n    renderers =\n        \"Table\":          (data, opts) ->   pivotTableRenderer(data, opts)\n        \"Table Barchart\": (data, opts) -> $(pivotTableRenderer(data, opts)).barchart()\n        \"Heatmap\":        (data, opts) -> $(pivotTableRenderer(data, opts)).heatmap(\"heatmap\",    opts)\n        \"Row Heatmap\":    (data, opts) -> $(pivotTableRenderer(data, opts)).heatmap(\"rowheatmap\", opts)\n        \"Col Heatmap\":    (data, opts) -> $(pivotTableRenderer(data, opts)).heatmap(\"colheatmap\", opts)\n\n    locales =\n        en:\n            aggregators: aggregators\n            renderers: renderers\n            localeStrings:\n                renderError: \"An error occurred rendering the PivotTable results.\"\n                computeError: \"An error occurred computing the PivotTable results.\"\n                uiRenderError: \"An error occurred rendering the PivotTable UI.\"\n                selectAll: \"Select All\"\n                selectNone: \"Select None\"\n                tooMany: \"(too many to list)\"\n                filterResults: \"Filter values\"\n                apply: \"Apply\"\n                cancel: \"Cancel\"\n                totals: \"Totals\" #for table renderer\n                vs: \"vs\" #for gchart renderer\n                by: \"by\" #for gchart renderer\n\n    #dateFormat deriver l10n requires month and day names to be passed in directly\n    mthNamesEn = [\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"]\n    dayNamesEn = [\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"]\n    zeroPad = (number) -> (\"0\"+number).substr(-2,2)\n\n    derivers =\n        bin: (col, binWidth) -> (record) -> record[col] - record[col] % binWidth\n        dateFormat: (col, formatString, utcOutput=false, mthNames=mthNamesEn, dayNames=dayNamesEn) ->\n            utc = if utcOutput then \"UTC\" else \"\"\n            (record) -> #thanks http://stackoverflow.com/a/12213072/112871\n                date = new Date(Date.parse(record[col]))\n                if isNaN(date) then return \"\"\n                formatString.replace /%(.)/g, (m, p) ->\n                    switch p\n                        when \"y\" then date[\"get#{utc}FullYear\"]()\n                        when \"m\" then zeroPad(date[\"get#{utc}Month\"]()+1)\n                        when \"n\" then mthNames[date[\"get#{utc}Month\"]()]\n                        when \"d\" then zeroPad(date[\"get#{utc}Date\"]())\n                        when \"w\" then dayNames[date[\"get#{utc}Day\"]()]\n                        when \"x\" then date[\"get#{utc}Day\"]()\n                        when \"H\" then zeroPad(date[\"get#{utc}Hours\"]())\n                        when \"M\" then zeroPad(date[\"get#{utc}Minutes\"]())\n                        when \"S\" then zeroPad(date[\"get#{utc}Seconds\"]())\n                        else \"%\" + p\n\n    naturalSort = (as, bs) => #thanks http://stackoverflow.com/a/4373421/112871\n        rx = /(\\d+)|(\\D+)/g\n        rd = /\\d/\n        rz = /^0/\n        if typeof as is \"number\" or typeof bs is \"number\"\n            return 1  if isNaN(as)\n            return -1  if isNaN(bs)\n            return as - bs\n        a = String(as)\n        b = String(bs)\n        return 0  if a is b\n        return (if a > b then 1 else -1)  unless rd.test(a) and rd.test(b)\n        a = a.match(rx)\n        b = b.match(rx)\n        while a.length and b.length\n            a1 = a.shift()\n            b1 = b.shift()\n            if a1 != b1\n                if rd.test(a1) and rd.test(b1)\n                    return a1.replace(rz, \".0\") - b1.replace(rz, \".0\")\n                else\n                    return (if a1 > b1 then 1 else -1)\n        a.length - b.length\n\n    sortAs = (order) ->\n        mapping = {}\n        l_mapping = {} # sort lowercased keys similarly\n        for i, x of order\n            mapping[x] = i\n            l_mapping[x.toLowerCase()] = i if typeof x == \"string\"\n        (a, b) ->\n            if mapping[a]? and mapping[b]? then mapping[a] - mapping[b]\n            else if mapping[a]? then -1\n            else if mapping[b]? then 1\n            else if l_mapping[a]? and l_mapping[b]? then l_mapping[a] - l_mapping[b]\n            else if l_mapping[a]? then -1\n            else if l_mapping[b]? then 1\n            else naturalSort(a,b)\n\n    getSort = (sorters, attr) ->\n        if sorters?\n            if $.isFunction(sorters)\n                sort = sorters(attr)\n                return sort if $.isFunction(sort)\n            else if sorters[attr]?\n                return sorters[attr]\n        return naturalSort\n\n    ###\n    Data Model class\n    ###\n\n    class PivotData\n        constructor: (input, opts = {}) ->\n            @input = input\n            @aggregator = opts.aggregator ? aggregatorTemplates.count()()\n            @aggregatorName = opts.aggregatorName ? \"Count\"\n            @colAttrs = opts.cols ? []\n            @rowAttrs = opts.rows ? []\n            @valAttrs = opts.vals ? []\n            @sorters = opts.sorters ? {}\n            @derivedAttributes = opts.derivedAttributes ? {}\n            @filter = opts.filter ? (-> true)\n            @tree = {}\n            @rowKeys = []\n            @colKeys = []\n            @rowTotals = {}\n            @colTotals = {}\n            @allTotal = @aggregator(this, [], [])\n            @sorted = false\n\n            # iterate through input, accumulating data for cells\n            PivotData.forEachRecord @input, @derivedAttributes, (record) =>\n                @processRecord(record) if @filter(record)\n\n        #can handle arrays or jQuery selections of tables\n        @forEachRecord = (input, derivedAttributes, f) ->\n            if $.isEmptyObject derivedAttributes\n                addRecord = f\n            else\n                addRecord = (record) ->\n                    record[k] = v(record) ? record[k] for k, v of derivedAttributes\n                    f(record)\n\n            #if it's a function, have it call us back\n            if $.isFunction(input)\n                input(addRecord)\n            else if $.isArray(input)\n                if $.isArray(input[0]) #array of arrays\n                    for own i, compactRecord of input when i > 0\n                        record = {}\n                        record[k] = compactRecord[j] for own j, k of input[0]\n                        addRecord(record)\n                else #array of objects\n                    addRecord(record) for record in input\n            else if input instanceof jQuery\n                tblCols = []\n                $(\"thead > tr > th\", input).each (i) -> tblCols.push $(this).text()\n                $(\"tbody > tr\", input).each (i) ->\n                    record = {}\n                    $(\"td\", this).each (j) -> record[tblCols[j]] = $(this).text()\n                    addRecord(record)\n            else\n                throw new Error(\"unknown input format\")\n\n        forEachMatchingRecord: (criteria, callback) ->\n            PivotData.forEachRecord @input, @derivedAttributes, (record) =>\n                return if not @filter(record)\n                for k, v of criteria\n                    return if v != (record[k] ? \"null\")\n                callback(record)\n\n        arrSort: (attrs) =>\n            sortersArr = (getSort(@sorters, a) for a in attrs)\n            (a,b) ->\n                for own i, sorter of sortersArr\n                    comparison = sorter(a[i], b[i])\n                    return comparison if comparison != 0\n                return 0\n\n        sortKeys: () =>\n            if not @sorted\n                @sorted = true\n                @rowKeys.sort @arrSort(@rowAttrs)\n                @colKeys.sort @arrSort(@colAttrs)\n\n        getColKeys: () =>\n            @sortKeys()\n            return @colKeys\n\n        getRowKeys: () =>\n            @sortKeys()\n            return @rowKeys\n\n        processRecord: (record) -> #this code is called in a tight loop\n            colKey = []\n            rowKey = []\n            colKey.push record[x] ? \"null\" for x in @colAttrs\n            rowKey.push record[x] ? \"null\" for x in @rowAttrs\n            flatRowKey = rowKey.join(String.fromCharCode(0))\n            flatColKey = colKey.join(String.fromCharCode(0))\n\n            @allTotal.push record\n\n            if rowKey.length != 0\n                if not @rowTotals[flatRowKey]\n                    @rowKeys.push rowKey\n                    @rowTotals[flatRowKey] = @aggregator(this, rowKey, [])\n                @rowTotals[flatRowKey].push record\n\n            if colKey.length != 0\n                if not @colTotals[flatColKey]\n                    @colKeys.push colKey\n                    @colTotals[flatColKey] = @aggregator(this, [], colKey)\n                @colTotals[flatColKey].push record\n\n            if colKey.length != 0 and rowKey.length != 0\n                if not @tree[flatRowKey]\n                    @tree[flatRowKey] = {}\n                if not @tree[flatRowKey][flatColKey]\n                    @tree[flatRowKey][flatColKey] = @aggregator(this, rowKey, colKey)\n                @tree[flatRowKey][flatColKey].push record\n\n        getAggregator: (rowKey, colKey) =>\n            flatRowKey = rowKey.join(String.fromCharCode(0))\n            flatColKey = colKey.join(String.fromCharCode(0))\n            if rowKey.length == 0 and colKey.length == 0\n                agg = @allTotal\n            else if rowKey.length == 0\n                agg = @colTotals[flatColKey]\n            else if colKey.length == 0\n                agg = @rowTotals[flatRowKey]\n            else\n                agg = @tree[flatRowKey][flatColKey]\n            return agg ? {value: (-> null), format: -> \"\"}\n\n    #expose these to the outside world\n    $.pivotUtilities = {aggregatorTemplates, aggregators, renderers, derivers, locales,\n        naturalSort, numberFormat, sortAs, PivotData}\n\n    ###\n    Default Renderer for hierarchical table layout\n    ###\n\n    pivotTableRenderer = (pivotData, opts) ->\n\n        defaults =\n            table: clickCallback: null\n            localeStrings: totals: \"Totals\"\n\n        opts = $.extend(true, {}, defaults, opts)\n\n        colAttrs = pivotData.colAttrs\n        rowAttrs = pivotData.rowAttrs\n        rowKeys = pivotData.getRowKeys()\n        colKeys = pivotData.getColKeys()\n\n        if opts.table.clickCallback\n            getClickHandler = (value, rowValues, colValues) ->\n                filters = {}\n                filters[attr] = colValues[i] for own i, attr of colAttrs when colValues[i]?\n                filters[attr] = rowValues[i] for own i, attr of rowAttrs when rowValues[i]?\n                return (e) -> opts.table.clickCallback(e, value, filters, pivotData)\n\n        #now actually build the output\n        result = document.createElement(\"table\")\n        result.className = \"pvtTable\"\n\n        #helper function for setting row/col-span in pivotTableRenderer\n        spanSize = (arr, i, j) ->\n            if i != 0\n                noDraw = true\n                for x in [0..j]\n                    if arr[i-1][x] != arr[i][x]\n                        noDraw = false\n                if noDraw\n                  return -1 #do not draw cell\n            len = 0\n            while i+len < arr.length\n                stop = false\n                for x in [0..j]\n                    stop = true if arr[i][x] != arr[i+len][x]\n                break if stop\n                len++\n            return len\n\n        #the first few rows are for col headers\n        thead = document.createElement(\"thead\")\n        for own j, c of colAttrs\n            tr = document.createElement(\"tr\")\n            if parseInt(j) == 0 and rowAttrs.length != 0\n                th = document.createElement(\"th\")\n                th.setAttribute(\"colspan\", rowAttrs.length)\n                th.setAttribute(\"rowspan\", colAttrs.length)\n                tr.appendChild th\n            th = document.createElement(\"th\")\n            th.className = \"pvtAxisLabel\"\n            th.textContent = c\n            tr.appendChild th\n            for own i, colKey of colKeys\n                x = spanSize(colKeys, parseInt(i), parseInt(j))\n                if x != -1\n                    th = document.createElement(\"th\")\n                    th.className = \"pvtColLabel\"\n                    th.textContent = colKey[j]\n                    th.setAttribute(\"colspan\", x)\n                    if parseInt(j) == colAttrs.length-1 and rowAttrs.length != 0\n                        th.setAttribute(\"rowspan\", 2)\n                    tr.appendChild th\n            if parseInt(j) == 0\n                th = document.createElement(\"th\")\n                th.className = \"pvtTotalLabel\"\n                th.innerHTML = opts.localeStrings.totals\n                th.setAttribute(\"rowspan\", colAttrs.length + (if rowAttrs.length ==0 then 0 else 1))\n                tr.appendChild th\n            thead.appendChild tr\n\n        #then a row for row header headers\n        if rowAttrs.length !=0\n            tr = document.createElement(\"tr\")\n            for own i, r of rowAttrs\n                th = document.createElement(\"th\")\n                th.className = \"pvtAxisLabel\"\n                th.textContent = r\n                tr.appendChild th\n            th = document.createElement(\"th\")\n            if colAttrs.length ==0\n                th.className = \"pvtTotalLabel\"\n                th.innerHTML = opts.localeStrings.totals\n            tr.appendChild th\n            thead.appendChild tr\n        result.appendChild thead\n\n        #now the actual data rows, with their row headers and totals\n        tbody = document.createElement(\"tbody\")\n        for own i, rowKey of rowKeys\n            tr = document.createElement(\"tr\")\n            for own j, txt of rowKey\n                x = spanSize(rowKeys, parseInt(i), parseInt(j))\n                if x != -1\n                    th = document.createElement(\"th\")\n                    th.className = \"pvtRowLabel\"\n                    th.textContent = txt\n                    th.setAttribute(\"rowspan\", x)\n                    if parseInt(j) == rowAttrs.length-1 and colAttrs.length !=0\n                        th.setAttribute(\"colspan\",2)\n                    tr.appendChild th\n            for own j, colKey of colKeys #this is the tight loop\n                aggregator = pivotData.getAggregator(rowKey, colKey)\n                val = aggregator.value()\n                td = document.createElement(\"td\")\n                td.className = \"pvtVal row#{i} col#{j}\"\n                td.textContent = aggregator.format(val)\n                td.setAttribute(\"data-value\", val)\n                if getClickHandler?\n                    td.onclick = getClickHandler(val, rowKey, colKey)\n                tr.appendChild td\n\n            totalAggregator = pivotData.getAggregator(rowKey, [])\n            val = totalAggregator.value()\n            td = document.createElement(\"td\")\n            td.className = \"pvtTotal rowTotal\"\n            td.textContent = totalAggregator.format(val)\n            td.setAttribute(\"data-value\", val)\n            if getClickHandler?\n                td.onclick = getClickHandler(val, rowKey, [])\n            td.setAttribute(\"data-for\", \"row\"+i)\n            tr.appendChild td\n            tbody.appendChild tr\n\n        #finally, the row for col totals, and a grand total\n        tr = document.createElement(\"tr\")\n        th = document.createElement(\"th\")\n        th.className = \"pvtTotalLabel\"\n        th.innerHTML = opts.localeStrings.totals\n        th.setAttribute(\"colspan\", rowAttrs.length + (if colAttrs.length == 0 then 0 else 1))\n        tr.appendChild th\n        for own j, colKey of colKeys\n            totalAggregator = pivotData.getAggregator([], colKey)\n            val = totalAggregator.value()\n            td = document.createElement(\"td\")\n            td.className = \"pvtTotal colTotal\"\n            td.textContent = totalAggregator.format(val)\n            td.setAttribute(\"data-value\", val)\n            if getClickHandler?\n                td.onclick = getClickHandler(val, [], colKey)\n            td.setAttribute(\"data-for\", \"col\"+j)\n            tr.appendChild td\n        totalAggregator = pivotData.getAggregator([], [])\n        val = totalAggregator.value()\n        td = document.createElement(\"td\")\n        td.className = \"pvtGrandTotal\"\n        td.textContent = totalAggregator.format(val)\n        td.setAttribute(\"data-value\", val)\n        if getClickHandler?\n            td.onclick = getClickHandler(val, [], [])\n        tr.appendChild td\n        tbody.appendChild tr\n        result.appendChild tbody\n\n        #squirrel this away for later\n        result.setAttribute(\"data-numrows\", rowKeys.length)\n        result.setAttribute(\"data-numcols\", colKeys.length)\n\n        return result\n\n    ###\n    Pivot Table core: create PivotData object and call Renderer on it\n    ###\n\n    $.fn.pivot = (input, inputOpts, locale=\"en\") ->\n        locale = \"en\" if not locales[locale]?\n        defaults =\n            cols : [], rows: [], vals: []\n            dataClass: PivotData\n            filter: -> true\n            aggregator: aggregatorTemplates.count()()\n            aggregatorName: \"Count\"\n            sorters: {}\n            derivedAttributes: {}\n            renderer: pivotTableRenderer\n\n        localeStrings = $.extend(true, {}, locales.en.localeStrings, locales[locale].localeStrings)\n        localeDefaults =\n            rendererOptions: {localeStrings}\n            localeStrings: localeStrings\n\n        opts = $.extend(true, {}, localeDefaults, $.extend({}, defaults, inputOpts))\n\n        result = null\n        try\n            pivotData = new opts.dataClass(input, opts)\n            try\n                result = opts.renderer(pivotData, opts.rendererOptions)\n            catch e\n                console.error(e.stack) if console?\n                result = $(\"<span>\").html opts.localeStrings.renderError\n        catch e\n            console.error(e.stack) if console?\n            result = $(\"<span>\").html opts.localeStrings.computeError\n\n        x = this[0]\n        x.removeChild(x.lastChild) while x.hasChildNodes()\n        return @append result\n\n\n    ###\n    Pivot Table UI: calls Pivot Table core above with options set by user\n    ###\n\n    $.fn.pivotUI = (input, inputOpts, overwrite = false, locale=\"en\") ->\n        locale = \"en\" if not locales[locale]?\n        defaults =\n            derivedAttributes: {}\n            aggregators: locales[locale].aggregators\n            renderers: locales[locale].renderers\n            hiddenAttributes: []\n            menuLimit: 500\n            cols: [], rows: [], vals: []\n            dataClass: PivotData\n            exclusions: {}\n            inclusions: {}\n            unusedAttrsVertical: 85\n            autoSortUnusedAttrs: false\n            onRefresh: null\n            filter: -> true\n            sorters: {}\n\n        localeStrings = $.extend(true, {}, locales.en.localeStrings, locales[locale].localeStrings)\n        localeDefaults =\n            rendererOptions: {localeStrings}\n            localeStrings: localeStrings\n\n        existingOpts = @data \"pivotUIOptions\"\n        if not existingOpts? or overwrite\n            opts = $.extend(true, {}, localeDefaults, $.extend({}, defaults, inputOpts))\n        else\n            opts = existingOpts\n\n        try\n            # do a first pass on the data to cache a materialized copy of any\n            # function-valued inputs and to compute dimension cardinalities\n            attrValues = {}\n            materializedInput = []\n            recordsProcessed = 0\n            PivotData.forEachRecord input, opts.derivedAttributes, (record) ->\n                return unless opts.filter(record)\n                materializedInput.push(record)\n                for own attr of record\n                    if not attrValues[attr]?\n                        attrValues[attr] = {}\n                        if recordsProcessed > 0\n                            attrValues[attr][\"null\"] = recordsProcessed\n                for attr of attrValues\n                    value = record[attr] ? \"null\"\n                    attrValues[attr][value] ?= 0\n                    attrValues[attr][value]++\n                recordsProcessed++\n\n            #start building the output\n            uiTable = $(\"<table>\", \"class\": \"pvtUi\").attr(\"cellpadding\", 5)\n\n            #renderer control\n            rendererControl = $(\"<td>\")\n\n            renderer = $(\"<select>\")\n                .addClass('pvtRenderer')\n                .appendTo(rendererControl)\n                .bind \"change\", -> refresh() #capture reference\n            for own x of opts.renderers\n                $(\"<option>\").val(x).html(x).appendTo(renderer)\n\n\n            #axis list, including the double-click menu\n            unused = $(\"<td>\").addClass('pvtAxisContainer pvtUnused')\n            shownAttributes = (a for a of attrValues when a not in opts.hiddenAttributes)\n\n            unusedAttrsVerticalAutoOverride = false\n            if opts.unusedAttrsVertical == \"auto\"\n                unusedAttrsVerticalAutoCutoff = 120 # legacy support\n            else\n                unusedAttrsVerticalAutoCutoff = parseInt opts.unusedAttrsVertical\n\n            if not isNaN(unusedAttrsVerticalAutoCutoff)\n                attrLength = 0\n                attrLength += a.length for a in shownAttributes\n                unusedAttrsVerticalAutoOverride = attrLength > unusedAttrsVerticalAutoCutoff\n\n            if opts.unusedAttrsVertical == true or unusedAttrsVerticalAutoOverride\n                unused.addClass('pvtVertList')\n            else\n                unused.addClass('pvtHorizList')\n\n            for own i, attr of shownAttributes\n                do (attr) ->\n                    values = (v for v of attrValues[attr])\n                    hasExcludedItem = false\n                    valueList = $(\"<div>\").addClass('pvtFilterBox').hide()\n\n                    valueList.append $(\"<h4>\").append(\n                        $(\"<span>\").text(attr),\n                        $(\"<span>\").addClass(\"count\").text(\"(#{values.length})\"),\n                        )\n                    if values.length > opts.menuLimit\n                        valueList.append $(\"<p>\").html(opts.localeStrings.tooMany)\n                    else\n                        if values.length > 5\n                            controls = $(\"<p>\").appendTo(valueList)\n                            sorter = getSort(opts.sorters, attr)\n                            placeholder = opts.localeStrings.filterResults\n                            $(\"<input>\", {type: \"text\"}).appendTo(controls)\n                                .attr({placeholder: placeholder, class: \"pvtSearch\"})\n                                .bind \"keyup\", ->\n                                    filter = $(this).val().toLowerCase().trim()\n                                    accept_gen = (prefix, accepted) -> (v) ->\n                                        real_filter = filter.substring(prefix.length).trim()\n                                        return true if real_filter.length == 0\n                                        return Math.sign(sorter(v.toLowerCase(), real_filter)) in accepted\n                                    accept =\n                                        if      filter.startsWith(\">=\") then accept_gen(\">=\", [1,0])\n                                        else if filter.startsWith(\"<=\") then accept_gen(\"<=\", [-1,0])\n                                        else if filter.startsWith(\">\")  then accept_gen(\">\",  [1])\n                                        else if filter.startsWith(\"<\")  then accept_gen(\"<\",  [-1])\n                                        else if filter.startsWith(\"~\")  then (v) ->\n                                                return true if filter.substring(1).trim().length == 0\n                                                v.toLowerCase().match(filter.substring(1))\n                                        else (v) -> v.toLowerCase().indexOf(filter) != -1\n\n                                    valueList.find('.pvtCheckContainer p label span.value').each ->\n                                        if accept($(this).text())\n                                            $(this).parent().parent().show()\n                                        else\n                                            $(this).parent().parent().hide()\n                            controls.append $(\"<br>\")\n                            $(\"<button>\", {type:\"button\"}).appendTo(controls)\n                                .html(opts.localeStrings.selectAll)\n                                .bind \"click\", ->\n                                    valueList.find(\"input:visible:not(:checked)\")\n                                        .prop(\"checked\", true).toggleClass(\"changed\")\n                                    return false\n                            $(\"<button>\", {type:\"button\"}).appendTo(controls)\n                                .html(opts.localeStrings.selectNone)\n                                .bind \"click\", ->\n                                    valueList.find(\"input:visible:checked\")\n                                        .prop(\"checked\", false).toggleClass(\"changed\")\n                                    return false\n\n                        checkContainer = $(\"<div>\").addClass(\"pvtCheckContainer\").appendTo(valueList)\n\n                        for value in values.sort(getSort(opts.sorters, attr))\n                             valueCount = attrValues[attr][value]\n                             filterItem = $(\"<label>\")\n                             filterItemExcluded = false\n                             if opts.inclusions[attr]\n                                filterItemExcluded = (value not in opts.inclusions[attr])\n                             else if opts.exclusions[attr]\n                                filterItemExcluded = (value in opts.exclusions[attr])\n                             hasExcludedItem ||= filterItemExcluded\n                             $(\"<input>\")\n                                .attr(\"type\", \"checkbox\").addClass('pvtFilter')\n                                .attr(\"checked\", !filterItemExcluded).data(\"filter\", [attr,value])\n                                .appendTo(filterItem)\n                                .bind \"change\", -> $(this).toggleClass(\"changed\")\n                             filterItem.append $(\"<span>\").addClass(\"value\").text(value)\n                             filterItem.append $(\"<span>\").addClass(\"count\").text(\"(\"+valueCount+\")\")\n                             checkContainer.append $(\"<p>\").append(filterItem)\n\n                    closeFilterBox = ->\n                        if valueList.find(\"[type='checkbox']\").length >\n                               valueList.find(\"[type='checkbox']:checked\").length\n                                attrElem.addClass \"pvtFilteredAttribute\"\n                            else\n                                attrElem.removeClass \"pvtFilteredAttribute\"\n\n                            valueList.find('.pvtSearch').val('')\n                            valueList.find('.pvtCheckContainer p').show()\n                            valueList.hide()\n\n                    finalButtons = $(\"<p>\").appendTo(valueList)\n\n                    if values.length <= opts.menuLimit\n                        $(\"<button>\", {type: \"button\"}).text(opts.localeStrings.apply)\n                            .appendTo(finalButtons).bind \"click\", ->\n                                if valueList.find(\".changed\").removeClass(\"changed\").length\n                                    refresh()\n                                closeFilterBox()\n\n                    $(\"<button>\", {type: \"button\"}).text(opts.localeStrings.cancel)\n                        .appendTo(finalButtons).bind \"click\", ->\n                            valueList.find(\".changed:checked\")\n                                .removeClass(\"changed\").prop(\"checked\", false)\n                            valueList.find(\".changed:not(:checked)\")\n                                .removeClass(\"changed\").prop(\"checked\", true)\n                            closeFilterBox()\n\n                    triangleLink = $(\"<span>\").addClass('pvtTriangle')\n                        .html(\" &#x25BE;\").bind \"click\", (e) ->\n                            {left, top} = $(e.currentTarget).position()\n                            valueList.css(left: left+10, top: top+10).show()\n\n                    attrElem = $(\"<li>\").addClass(\"axis_#{i}\")\n                        .append $(\"<span>\").addClass('pvtAttr').text(attr).data(\"attrName\", attr).append(triangleLink)\n\n                    attrElem.addClass('pvtFilteredAttribute') if hasExcludedItem\n                    unused.append(attrElem).append(valueList)\n\n            tr1 = $(\"<tr>\").appendTo(uiTable)\n\n            #aggregator menu and value area\n\n            aggregator = $(\"<select>\").addClass('pvtAggregator')\n                .bind \"change\", -> refresh() #capture reference\n            for own x of opts.aggregators\n                aggregator.append $(\"<option>\").val(x).html(x)\n\n            $(\"<td>\").addClass('pvtVals')\n              .appendTo(tr1)\n              .append(aggregator)\n              .append($(\"<br>\"))\n\n            #column axes\n            $(\"<td>\").addClass('pvtAxisContainer pvtHorizList pvtCols').appendTo(tr1)\n\n            tr2 = $(\"<tr>\").appendTo(uiTable)\n\n            #row axes\n            tr2.append $(\"<td>\").addClass('pvtAxisContainer pvtRows').attr(\"valign\", \"top\")\n\n            #the actual pivot table container\n            pivotTable = $(\"<td>\")\n                .attr(\"valign\", \"top\")\n                .addClass('pvtRendererArea')\n                .appendTo(tr2)\n\n            #finally the renderer dropdown and unused attribs are inserted at the requested location\n            if opts.unusedAttrsVertical == true or unusedAttrsVerticalAutoOverride\n                uiTable.find('tr:nth-child(1)').prepend rendererControl\n                uiTable.find('tr:nth-child(2)').prepend unused\n            else\n                uiTable.prepend $(\"<tr>\").append(rendererControl).append(unused)\n\n            #render the UI in its default state\n            @html uiTable\n\n            #set up the UI initial state as requested by moving elements around\n\n            for x in opts.cols\n                @find(\".pvtCols\").append @find(\".axis_#{$.inArray(x, shownAttributes)}\")\n            for x in opts.rows\n                @find(\".pvtRows\").append @find(\".axis_#{$.inArray(x, shownAttributes)}\")\n            if opts.aggregatorName?\n                @find(\".pvtAggregator\").val opts.aggregatorName\n            if opts.rendererName?\n                @find(\".pvtRenderer\").val opts.rendererName\n\n            initialRender = true\n\n            #set up for refreshing\n            refreshDelayed = =>\n                subopts =\n                    derivedAttributes: opts.derivedAttributes\n                    localeStrings: opts.localeStrings\n                    rendererOptions: opts.rendererOptions\n                    sorters: opts.sorters\n                    cols: [], rows: []\n                    dataClass: opts.dataClass\n\n                numInputsToProcess = opts.aggregators[aggregator.val()]([])().numInputs ? 0\n                vals = []\n                @find(\".pvtRows li span.pvtAttr\").each -> subopts.rows.push $(this).data(\"attrName\")\n                @find(\".pvtCols li span.pvtAttr\").each -> subopts.cols.push $(this).data(\"attrName\")\n                @find(\".pvtVals select.pvtAttrDropdown\").each ->\n                    if numInputsToProcess == 0\n                        $(this).remove()\n                    else\n                        numInputsToProcess--\n                        vals.push $(this).val() if $(this).val() != \"\"\n\n                if numInputsToProcess != 0\n                    pvtVals = @find(\".pvtVals\")\n                    for x in [0...numInputsToProcess]\n                        newDropdown = $(\"<select>\")\n                            .addClass('pvtAttrDropdown')\n                            .append($(\"<option>\"))\n                            .bind \"change\", -> refresh()\n                        for attr in shownAttributes\n                            newDropdown.append($(\"<option>\").val(attr).text(attr))\n                        pvtVals.append(newDropdown)\n\n                if initialRender\n                    vals = opts.vals\n                    i = 0\n                    @find(\".pvtVals select.pvtAttrDropdown\").each ->\n                        $(this).val vals[i]\n                        i++\n                    initialRender = false\n\n                subopts.aggregatorName = aggregator.val()\n                subopts.vals = vals\n                subopts.aggregator = opts.aggregators[aggregator.val()](vals)\n                subopts.renderer = opts.renderers[renderer.val()]\n\n                #construct filter here\n                exclusions = {}\n                @find('input.pvtFilter').not(':checked').each ->\n                    filter = $(this).data(\"filter\")\n                    if exclusions[filter[0]]?\n                        exclusions[filter[0]].push( filter[1] )\n                    else\n                        exclusions[filter[0]] = [ filter[1] ]\n                #include inclusions when exclusions present\n                inclusions = {}\n                @find('input.pvtFilter:checked').each ->\n                    filter = $(this).data(\"filter\")\n                    if exclusions[filter[0]]?\n                        if inclusions[filter[0]]?\n                            inclusions[filter[0]].push( filter[1] )\n                        else\n                            inclusions[filter[0]] = [ filter[1] ]\n\n                subopts.filter = (record) ->\n                    return false if not opts.filter(record)\n                    for k,excludedItems of exclusions\n                        return false if \"\"+(record[k] ? 'null') in excludedItems\n                    return true\n\n                pivotTable.pivot(materializedInput,subopts)\n                pivotUIOptions = $.extend {}, opts,\n                    cols: subopts.cols\n                    rows: subopts.rows\n                    vals: vals\n                    exclusions: exclusions\n                    inclusions: inclusions\n                    inclusionsInfo: inclusions #duplicated for backwards-compatibility\n                    aggregatorName: aggregator.val()\n                    rendererName: renderer.val()\n\n                @data \"pivotUIOptions\", pivotUIOptions\n\n                # if requested make sure unused columns are in alphabetical order\n                if opts.autoSortUnusedAttrs\n                    unusedAttrsContainer = @find(\"td.pvtUnused.pvtAxisContainer\")\n                    $(unusedAttrsContainer).children(\"li\")\n                        .sort((a, b) => naturalSort($(a).text(), $(b).text()))\n                        .appendTo unusedAttrsContainer\n\n                pivotTable.css(\"opacity\", 1)\n                opts.onRefresh(pivotUIOptions) if opts.onRefresh?\n\n            refresh = =>\n                pivotTable.css(\"opacity\", 0.5)\n                setTimeout refreshDelayed, 10\n\n            #the very first refresh will actually display the table\n            refresh()\n\n            @find(\".pvtAxisContainer\").sortable\n                    update: (e, ui) -> refresh() if not ui.sender?\n                    connectWith: @find(\".pvtAxisContainer\")\n                    items: 'li'\n                    placeholder: 'pvtPlaceholder'\n        catch e\n            console.error(e.stack) if console?\n            @html opts.localeStrings.uiRenderError\n        return this\n\n    ###\n    Heatmap post-processing\n    ###\n\n    $.fn.heatmap = (scope = \"heatmap\", opts) ->\n        numRows = @data \"numrows\"\n        numCols = @data \"numcols\"\n\n        # given a series of values\n        # must return a function to map a given value to a CSS color\n        colorScaleGenerator = opts?.heatmap?.colorScaleGenerator\n        colorScaleGenerator ?= (values) ->\n            min = Math.min(values...)\n            max = Math.max(values...)\n            return (x) ->\n                nonRed = 255 - Math.round 255*(x-min)/(max-min)\n                return \"rgb(255,#{nonRed},#{nonRed})\"\n\n        heatmapper = (scope) =>\n            forEachCell = (f) =>\n                @find(scope).each ->\n                    x = $(this).data(\"value\")\n                    f(x, $(this)) if x? and isFinite(x)\n\n            values = []\n            forEachCell (x) -> values.push x\n            colorScale = colorScaleGenerator(values)\n            forEachCell (x, elem) -> elem.css \"background-color\", colorScale(x)\n\n        switch scope\n            when \"heatmap\"    then heatmapper \".pvtVal\"\n            when \"rowheatmap\" then heatmapper \".pvtVal.row#{i}\" for i in [0...numRows]\n            when \"colheatmap\" then heatmapper \".pvtVal.col#{j}\" for j in [0...numCols]\n\n        heatmapper \".pvtTotal.rowTotal\"\n        heatmapper \".pvtTotal.colTotal\"\n\n        return this\n\n    ###\n    Barchart post-processing\n    ###\n\n    $.fn.barchart =  ->\n        numRows = @data \"numrows\"\n        numCols = @data \"numcols\"\n\n        barcharter = (scope) =>\n            forEachCell = (f) =>\n                @find(scope).each ->\n                    x = $(this).data(\"value\")\n                    f(x, $(this)) if x? and isFinite(x)\n\n            values = []\n            forEachCell (x) -> values.push x\n            max = Math.max(values...)\n            scaler = (x) -> 100*x/(1.4*max)\n            forEachCell (x, elem) ->\n                text = elem.text()\n                wrapper = $(\"<div>\").css\n                    \"position\": \"relative\"\n                    \"height\": \"55px\"\n                wrapper.append $(\"<div>\").css\n                    \"position\": \"absolute\"\n                    \"bottom\": 0\n                    \"left\": 0\n                    \"right\": 0\n                    \"height\": scaler(x) + \"%\"\n                    \"background-color\": \"gray\"\n                wrapper.append $(\"<div>\").text(text).css\n                    \"position\":\"relative\"\n                    \"padding-left\":\"5px\"\n                    \"padding-right\":\"5px\"\n\n                elem.css(\"padding\": 0,\"padding-top\": \"5px\", \"text-align\": \"center\").html wrapper\n\n        barcharter \".pvtVal.row#{i}\" for i in [0...numRows]\n        barcharter \".pvtTotal.colTotal\"\n\n        return this\n"]}